[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Mastering Shiny Examples and Solutions for Python",
    "section": "",
    "text": "Preface\nThis material shows how to use Shiny for Python to implement example apps and exerciese solutions for Hadley Wickham’s Mastering Shiny, which were originally implemented in R. My material will contain mostly only codes with few additional specific details of Shiny for Python, while it does not contain comprehensive explanation about Shiny framework. To understand Shiny framework, I highly recommend you to read Hadley Wickham’s Mastering Shiny first, which online version is also available.\nThe followings are materials that I referenced while creating this material:\nAlso, I got answers from Shiny community on Discord when I asked questions about implementing several examples. I appreciate great helps from Gordon Shotwell, Joe Cheng, and the community!\nComputation environment is as follows:"
  },
  {
    "objectID": "index.html#python",
    "href": "index.html#python",
    "title": "Mastering Shiny Examples and Solutions for Python",
    "section": "Python",
    "text": "Python\n\nPython version\n\n!python --version\n\nPython 3.11.2\n\n\n\n\nPackages\n\nwith open('requirements.txt', 'r') as f:\n    print(f.read())\n\nanyio==4.2.0\nappdirs==1.4.4\nappnope==0.1.3\nargon2-cffi==23.1.0\nargon2-cffi-bindings==21.2.0\narrow==1.3.0\nasgiref==3.7.2\nasttokens==2.4.1\nasync-lru==2.0.4\nattrs==23.1.0\nBabel==2.14.0\nbeautifulsoup4==4.12.2\nbleach==6.1.0\nbqplot==0.12.42\ncertifi==2023.11.17\ncffi==1.16.0\ncharset-normalizer==3.3.2\nclick==8.1.7\ncomm==0.2.0\ncontourpy==1.2.0\ncycler==0.12.1\ndebugpy==1.8.0\ndecorator==5.1.1\ndefusedxml==0.7.1\nexecuting==2.0.1\nfaicons==0.2.1\nfastjsonschema==2.19.1\nfonttools==4.47.0\nfqdn==1.5.1\ngast==0.4.0\nh11==0.14.0\nhtmltools==0.5.1\nidna==3.6\nipydatagrid==1.2.0\nipykernel==6.28.0\nipython==8.18.0\nipywidgets==8.1.1\nisoduration==20.11.0\njedi==0.19.1\nJinja2==3.1.2\njoblib==1.3.2\njson5==0.9.14\njsonpointer==2.4\njsonschema==4.20.0\njsonschema-specifications==2023.12.1\njupyter==1.0.0\njupyter-console==6.6.3\njupyter-events==0.9.0\njupyter-lsp==2.2.1\njupyter_client==8.6.0\njupyter_core==5.5.1\njupyter_server==2.12.1\njupyter_server_terminals==0.5.1\njupyterlab==4.0.10\njupyterlab-widgets==3.0.9\njupyterlab_pygments==0.3.0\njupyterlab_server==2.25.2\nkiwisolver==1.4.5\nlinkify-it-py==2.0.2\nmarkdown-it-py==3.0.0\nMarkupSafe==2.1.3\nmatplotlib==3.8.2\nmatplotlib-inline==0.1.6\nmdit-py-plugins==0.4.0\nmdurl==0.1.2\nmistune==3.0.2\nmizani==0.9.3\nnbclient==0.9.0\nnbconvert==7.13.1\nnbformat==5.9.2\nnest-asyncio==1.5.8\nnotebook==7.0.6\nnotebook_shim==0.2.3\nnumpy==1.26.2\noverrides==7.4.0\npackaging==23.2\npandas==2.1.4\npandocfilters==1.5.0\nparso==0.8.3\npatsy==0.5.5\npexpect==4.9.0\nPillow==10.1.0\nplatformdirs==4.1.0\nplotnine==0.12.4\nprometheus-client==0.19.0\nprompt-toolkit==3.0.36\npsutil==5.9.7\nptyprocess==0.7.0\npure-eval==0.2.2\npy2vega==0.6.1\npycparser==2.21\npydataset==0.2.0\nPygments==2.17.2\npyparsing==3.1.1\npython-dateutil==2.8.2\npython-json-logger==2.0.7\npython-multipart==0.0.6\npytz==2023.3.post1\nPyYAML==6.0.1\npyzmq==25.1.2\nqgrid==1.3.1\nqtconsole==5.5.1\nQtPy==2.4.1\nquestionary==2.0.1\nreferencing==0.32.0\nrequests==2.31.0\nrfc3339-validator==0.1.4\nrfc3986-validator==0.1.1\nrpds-py==0.16.2\nscikit-learn==1.3.2\nscipy==1.11.4\nseaborn==0.13.0\nSend2Trash==1.8.2\nshiny==0.6.1.1\nshiny_validate==0.1\nshinyswatch==0.4.2\nshinywidgets==0.2.4\nsix==1.16.0\nsniffio==1.3.0\nsoupsieve==2.5\nstack-data==0.6.3\nstarlette==0.34.0\nstatsmodels==0.14.1\nterminado==0.18.0\nthreadpoolctl==3.2.0\ntinycss2==1.2.1\ntornado==6.4\ntraitlets==5.14.0\ntraittypes==0.2.1\ntypes-python-dateutil==2.8.19.14\ntyping_extensions==4.9.0\ntzdata==2023.4\nuc-micro-py==1.0.2\nuri-template==1.3.0\nurllib3==2.1.0\nuvicorn==0.25.0\nwatchfiles==0.21.0\nwcwidth==0.2.12\nwebcolors==1.13\nwebencodings==0.5.1\nwebsocket-client==1.7.0\nwebsockets==12.0\nwidgetsnbextension==4.0.9"
  },
  {
    "objectID": "index.html#ide",
    "href": "index.html#ide",
    "title": "Mastering Shiny Examples and Solutions for Python",
    "section": "IDE",
    "text": "IDE\n\nVS Code extensions\n\nShiny for Python"
  },
  {
    "objectID": "basic-app.html#create-app-directory-and-file",
    "href": "basic-app.html#create-app-directory-and-file",
    "title": "Your first Shiny app",
    "section": "Create app directory and file",
    "text": "Create app directory and file\n\n\nexamples/basic-app/hello-world/app.py\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    \"Hello, world!\"\n)\n\ndef server(input, output, session):\n    ...\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "basic-app.html#running-and-stopping",
    "href": "basic-app.html#running-and-stopping",
    "title": "Your first Shiny app",
    "section": "Running and stopping",
    "text": "Running and stopping\n\nRun app\n\nClick ‘Run Shiny App’ button on VS Code that comes with Shiny for Python extension\n\n\n\n\nRun Shiny App button on VS Code\n\n\n\nIn terminal, like zsh, type shiny run {filename} where {filename} should be replaced with python filename with its path, e.g. shiny run examples/basic-app/hello-world/app.py\n\n\n\nStop the app\nIn terminal that Shiny is running, press Ctrl+C"
  },
  {
    "objectID": "basic-app.html#adding-ui-controls",
    "href": "basic-app.html#adding-ui-controls",
    "title": "Your first Shiny app",
    "section": "Adding UI controls",
    "text": "Adding UI controls\nUI controls are included in ui subpackage.\n\nui.input_*: craete input controls that users can provide inputs\nui.output_*: create output containers that computation results can be rendered\n\nLet’s create similar app to example in Mastering Shiny book.\n\n\nexamples/basic-app/adding-ui/app.py\n\nfrom shiny import App, ui\nfrom pydataset import data\n\napp_ui = ui.page_fluid(\n    ui.input_select(\"dataset\", label=\"Dataset\", choices=list(data()['dataset_id'])),\n    ui.output_text_verbatim(\"summary\"),\n    ui.output_table(\"table\")\n)\n\ndef server(input, output, session):\n    ...\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nNote\n\n\n\nI used pydataset package in Python instead of package:datasets in R, so the actual app looks different from the book example.\n\n\n\n\n\n\n\n\nNote\n\n\n\nHere, in ui.input_select(), please note that I used choices=list(data()['dataset_id']) instead of choices=data()['dataset_id']. If the argument include key/index, like dictionary or pandas.Sereis, the control will use the key/index is used as input value in server logic. To use element value as input value instead of pandas Series index, I convert pandas Series into list when passing it as choices argument of ui.input_select()."
  },
  {
    "objectID": "basic-app.html#adding-behavior",
    "href": "basic-app.html#adding-behavior",
    "title": "Your first Shiny app",
    "section": "Adding behavior",
    "text": "Adding behavior\nAdding behavior requires including server logics. It requires functions in render subpackage, so I additionally imported render.\n\n\nexamples/basic-app/adding-behavior/app.py\n\nfrom shiny import App, ui, render\nfrom pydataset import data\n\napp_ui = ui.page_fluid(\n    ui.input_select(\"dataset\", label=\"Dataset\", choices=list(data()['dataset_id'])),\n    ui.output_text_verbatim(\"summary\"),\n    ui.output_table(\"table\")\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def summary():\n        dataset = data(input.dataset())\n        return dataset.describe()\n    \n    @output\n    @render.table\n    def table():\n        dataset = data(input.dataset())\n        return dataset\n\napp = App(app_ui, server)\n\nIn this example, inside server() function, there are two functions that have same names to output controls in UI, \"summary\" and \"table\".\nShiny for Python uses decorators @render.* and @output. The render decorator should be chosen to be consistent with output control type in UI.\n\n\n\n\n\n\nTip\n\n\n\nIn case you need to name a server-side function differently from output control ID, you can use id argument in @output decorator like below:\n    @output(id=\"summary\")\n    @render.text\n    def print_summary():\n        dataset = data(input.dataset())\n        return dataset.describe()\n\n\n\n\n\n\n\n\nTip\n\n\n\n@output decorator is no longer required since v0.6.0 released on 2023-10-30, unless you need to set specific output option (e.g. id). Please see more details: Change Log for Shiny for Python.\nThe server function can be simplified as follows:\ndef server(input, output, session):\n    @render.text\n    def summary():\n        dataset = data(input.dataset())\n        return dataset.describe()\n    \n    @render.table\n    def table():\n        dataset = data(input.dataset())\n        return dataset"
  },
  {
    "objectID": "basic-app.html#reducing-duplication-with-reactive-expressions",
    "href": "basic-app.html#reducing-duplication-with-reactive-expressions",
    "title": "Your first Shiny app",
    "section": "Reducing duplication with reactive expressions",
    "text": "Reducing duplication with reactive expressions\nReactive expression requires reactive subpackage, so I additionally imported reactive.\n\n\nexamples/basic-app/reactive-expression/app.py\n\nfrom shiny import App, ui, render, reactive\nfrom pydataset import data\n\napp_ui = ui.page_fluid(\n    ui.input_select(\"dataset\", label=\"Dataset\", choices=list(data()['dataset_id'])),\n    ui.output_text_verbatim(\"summary\"),\n    ui.output_table(\"table\")\n)\n\ndef server(input, output, session):\n    # Create a reactive expression\n    @reactive.calc\n    def dataset():\n        return data(input.dataset())    \n\n    @output\n    @render.text\n    def summary():\n        return dataset().describe()\n    \n    @output\n    @render.table\n    def table():\n        return dataset()\n\napp = App(app_ui, server)\n\n@reactive.* decorators are used for the reactive programming.\n\n@reactive.calc is for “lazy and cached” computation that the computation is executed only when it is actually needed.\n@reactive.effect is for “eager and forgetful” computation that the computation is executed as soon as possible.\n\n\n\n\n\n\n\nNote\n\n\n\nIn original Shiny for Python release, the reactive functions used capitalized names, i.e. @reactive.Calc and @reactive.Effect. The lowercase names @reactive.calc and @reactive.effect were introduced with version 0.6.1 release on 2023-12-18. See Change Log\n\n\n\n\n\n\n\n\nWarning\n\n\n\nName of reactive expression should be unique within server function. In other words, it should be different from not only other reactive expressions but also any output names. In the example above, you cannot name reactive expression table() instead of dataset() because output named \"table\" and its corresponding server logic table() already exist."
  },
  {
    "objectID": "basic-app.html#exercises",
    "href": "basic-app.html#exercises",
    "title": "Your first Shiny app",
    "section": "Exercises",
    "text": "Exercises\n\nCreate an app that greets the user by name.\n\n\n\nsolutions/basic-app/greeting/app.py\n\nfrom shiny import App, ui, render\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"name\", \"What's your name?\", value=None),\n    ui.output_text(\"greeting\"),\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def greeting():\n        return f\"Hello {input.name()}\"\n\napp = App(app_ui, server)\n\n\nSuppose your friend wants to design an app that allows the user to set a number (x) between 1 and 50, and displays the result of multiplying this number by 5.\n\n\n\nsolutions/basic-app/multiplying/app.py\n\nfrom shiny import App, ui, render\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"x\", label=\"If x is\", min=1, max=50, value=30),\n    \"then x times 5 is\",\n    ui.output_text(\"product\"),\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def product():\n        return input.x() * 5\n\napp = App(app_ui, server)\n\n\nExtend the app from the previous exercise to allow the user to set the value of the multiplier, y, so that the app yields the value of x * y.\n\n\n\nsolutions/basic-app/multiplying-by-y/app.py\n\nfrom shiny import App, ui, render\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"x\", label=\"If x is\", min=1, max=50, value=30),\n    ui.input_slider(\"y\", label=\"and y is\", min=1, max=50, value=5),\n    \"then, x times y is\",\n    ui.output_text(\"product\"),\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def product():\n        return input.x() * input.y()\n\napp = App(app_ui, server)\n\n\nAdd some additional functionality and reduce the amount of duplicated code in the app by using a reactive expression.\n\n\n\nsolutions/basic-app/reactive-expression/app.py\n\nfrom shiny import App, ui, render, reactive\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"x\", label=\"If x is\", min=1, max=50, value=30),\n    ui.input_slider(\"y\", label=\"and y is\", min=1, max=50, value=5),\n    \"then, (x * y) is\", ui.output_text(\"product\"),\n    \"and, (x * y) + 5 is\", ui.output_text(\"product_plus5\"),\n    \"and (x * y) + 10 is\", ui.output_text(\"product_plus10\"),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def x_times_y():\n        return input.x() * input.y()\n\n    @output\n    @render.text\n    def product():\n        return x_times_y()\n    \n    @output\n    @render.text\n    def product_plus5():\n        return x_times_y() + 5\n    \n    @output\n    @render.text\n    def product_plus10():\n        return x_times_y() + 10\n\napp = App(app_ui, server)\n\n\nSelect a dataset from a package and the app prints out a summary and plot of the data.\n\n\n\nsolutions/basic-app/plotting/app.py\n\nfrom shiny import App, ui, render, reactive\nfrom pydataset import data\nimport seaborn as sns\n\napp_ui = ui.page_fluid(\n    ui.input_select(\"dataset\", label=\"Dataset\", choices=list(data()['dataset_id'])),\n    ui.output_text_verbatim(\"summary\"),\n    ui.output_plot(\"plot\")\n)\n\ndef server(input, output, session):\n    # Create a reactive expression\n    @reactive.calc\n    def dataset():\n        return data(input.dataset())    \n\n    @output\n    @render.text\n    def summary():\n        return dataset().describe()\n    \n    @output\n    @render.plot\n    def plot():\n        return sns.pairplot(dataset())\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nNote\n\n\n\nI used seaborn package to visualize data frame with pairwise scatter plot, which is similar to the book example in R."
  },
  {
    "objectID": "basic-ui.html#inputs",
    "href": "basic-ui.html#inputs",
    "title": "Basic UI",
    "section": "Inputs",
    "text": "Inputs\n\nCommon structure\nAll input functions have the same first two argument:\n\nid: the identifier used to connect the frontend with the backend: if your UI has an input with id=\"name\", the server function will access it with input.name().\nlabel: human-readable label for the control to appear on a web browser.\n\n\n\nFree Text\n\n\nexamples/basic-ui/inputs/app.py\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"name\", \"What's your name?\"),\n    ui.input_password(\"password\", \"What's your password?\"),\n    ui.input_text_area(\"story\", \"Tell me about yourself\", rows=3),\n)\n\n\n\nNumeric inputs\n\n\nexamples/basic-ui/inputs/app.py\n\napp_ui = ui.page_fluid(\n    ui.input_numeric(\"num\", \"Number one\", value=0, min=0, max=100),\n    ui.input_slider(\"num2\", \"Number two\", value=50, min=0, max=100),\n    ui.input_slider(\"rng\", \"Range\", value=(10, 20), min=0, max=100),\n)\n\n\n\n\n\n\n\nNote\n\n\n\nFor range slider, value argument can be a list (i.e. value=[10, 20]) instead of tuple, but in server function, input.rng() will be still return a tuple instead of a list.\n\n\n\n\nDates\n\n\nexamples/basic-ui/inputs/app.py\n\napp_ui = ui.page_fluid(\n    ui.input_date(\"dob\", \"When were you born?\"),\n    ui.input_date_range(\"holiday\", \"When do you want to go on vacation next?\"),\n)\n\n\n\nLimited choices\nInput controls for limited choices require choices argument to allow the user to choose from.\n\n\nexamples/basic-ui/inputs/app.py\n\nstate_names=[\n    \"Alabama\", \"Alaska\", \"Arizona\", \"Arkansas\", \"California\", \"Colorado\", \n    \"Connecticut\", \"Delaware\", \"Florida\", \"Georgia\", \"Hawaii\", \"Idaho\", \n    \"Illinois\", \"Indiana\", \"Iowa\", \"Kansas\", \"Kentucky\", \"Louisiana\", \n    \"Maine\", \"Maryland\", \"Massachusetts\", \"Michigan\", \"Minnesota\", \n    \"Mississippi\", \"Missouri\", \"Montana\", \"Nebraska\", \"Nevada\", \n    \"New Hampshire\", \"New Jersey\", \"New Mexico\", \"New York\", \n    \"North Carolina\", \"North Dakota\", \"Ohio\", \"Oklahoma\", \"Oregon\", \n    \"Pennsylvania\", \"Rhode Island\", \"South Carolina\", \"South Dakota\", \n    \"Tennessee\", \"Texas\", \"Utah\", \"Vermont\", \"Virginia\", \"Washington\", \n    \"West Virginia\", \"Wisconsin\", \"Wyoming\"]\n\nanimals = [\"dog\", \"cat\", \"mouse\", \"bird\", \"other\", \"I hate animals\"]\n\n\n\nexamples/basic-ui/inputs/app.py\n\napp_ui = ui.page_fluid(\n    ui.input_select(\"state\", \"What's your favourite states?\", choices=state_names,\n    ui.input_radio_buttons(\"animal\", \"What's your favourite animals?\", choices=animals),\n)\n\nchoices can be a dictionary instead of a list. In such cases, value is displayed on a screen, but key is retrieved when the input is accessed from a server function.\nFor example to show icon on screen, let us use faicons package, which provides an interface to Font-Awesome for use in Shiny for Python.\n\n\nexamples/basic-ui/inputs/app.py\n\nfrom faicons import icon_svg\n\napp_ui = ui.page_fluid(\n    ui.input_radio_buttons(\"rb\", \"Choose one:\", choices={\n        \"angry\": icon_svg(\"face-angry\"), \"happy\": icon_svg(\"face-smile\"), \"sad\": icon_svg(\"face-sad-tear\")}),\n)\n\n\n\n\n\n\n\nNote\n\n\n\nOn app, icons appear on each radio button items. However, when you call input.rb() in a server, it returns key values \"angry\", \"happy\", or \"sad\" based on which item was chosen by a user.\n\n\nui.input_select() and ui.input_selectize() allow a user to select multiple items when multiple=True.\n\n\nexamples/basic-ui/inputs/app.py\n\napp_ui = ui.page_fluid(\n    ui.input_selectize(\"states\", \"What's your favourite states?\", choices=state_names, multiple=True),\n)\n\nRadio button allows only a single item selection. Mutliple selection can be done through alternative control: ui.input_checkbox_group().\n\n\nexamples/basic-ui/inputs/app.py\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox_group(\"animals\", \"What animals do you like?\", choices=animals),\n)\n\nSingle checkbox ui.input_checkbox() is for Yes/No questions.\n\n\nexamples/basic-ui/inputs/app.py\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox(\"cleanup\", \"Clean up?\", value=True),\n    ui.input_checkbox(\"shutdown\", \"Shutdown?\"),\n)\n\n\n\nFile uploads\n\n\nexamples/basic-ui/inputs/app.py\n\napp_ui = ui.page_fluid(\n    ui.input_file(\"upload\", None),\n)\n\n\n\nAction buttons\n\n\nexamples/basic-ui/inputs/app.py\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"click\", \"Click me!\"),\n    ui.input_action_button(\"drink\", \"Drink me!\", icon=icon_svg(\"martini-glass-citrus\")),\n)\n\nYou can customise the appearance using the class_ argument.\n\n\nexamples/basic-ui/inputs/app.py\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"clickdanger\", \"Click me!\", class_=\"btn-danger\"),\n    ui.input_action_button(\"drinklarge\", \"Drink me!\", class_=\"btn-lg btn-success\"),\n    ui.br(),\n    ui.input_action_button(\"eat\", \"Eat me!\", class_=\"w-100\"),\n)\n\n\n\n\n\n\n\nNote\n\n\n\nui.br() is to create &lt;br&gt; HTML tag which is a line break syntax.\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn Mastering Shiny book, there is also example with class name btn-block to create full-width block buttons. It does not work in shiny package in python with version 0.6.1.1. I do not know the reason, but I guess that it may be because Shiny for Python is based on Bootstrap v5 that implement block buttons not through class but through layout. As a stop-gap solution for this example, I used class name w-100 from sizing classes.\n\n\n\n\nExercises\n\nLabel text boxes using a placeholder that appears inside the text entry area.\n\n\n\nsolutions/basic-ui/inputs/placeholder/app.py\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"name\", None, placeholder=\"Your name\"),\n)\n\ndef server(input, output, session):\n    ...\n\napp = App(app_ui, server)\n\n\nCreate a date slider.\n\n\n\nsolutions/basic-ui/inputs/dateslider/app.py\n\nfrom shiny import App, ui\nimport datetime\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"date\", \"When should we deliver?\",\n                    min=datetime.date(2020, 9, 16),\n                    max=datetime.date(2020, 9, 23),\n                    value=datetime.date(2020, 9, 17)),\n)\n\ndef server(input, output, session):\n    ...\n\napp = App(app_ui, server)\n\n\nCreate a slider input to select values between 0 and 100 where the interval between each selectable value on the slider is 5. Then, add animation to the input widget so when the user presses play the input widget scrolls through the range automatically.\n\n\n\nsolutions/basic-ui/inputs/animateslider/app.py\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"ani\", None, min=0, max=100, value=0,\n                    step=5, animate=True, ticks=True),\n)\n\ndef server(input, output, session):\n    ...\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nNote\n\n\n\nticks=True is not an essential argument for this exercise, but it guides a user to click a right position when selecting a number.\n\n\n\nCreate sub-headings that break the list up into pieces.\n\n\n\nsolutions/basic-ui/inputs/subheading/app.py\n\nfrom shiny import App, ui\n\ngrouped = {\n    \"Group A\": {\"A1\":\"Item A1\", \"A2\":\"Item A2\"},\n    \"Group B\": {\"B1\":\"Item B1\", \"B2\":\"Item B2\", \"B3\":\"Item B3\"},\n    \"Group C\": {\"C1\":\"Item C1\", \"C2\":\"Item C2\"}\n}\n\napp_ui = ui.page_fluid(\n    ui.input_select(\"long\", \"Choose:\", choices=grouped),\n)\n\ndef server(input, output, session):\n    ...\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nNote\n\n\n\nA dictionary of dictionaries used as choices argument. It would mean that server will use keys (e.g. \"A1\") as input values instead of appeared string (e.g. \"Item A1\"), so keys would need to be unique not only within a subgroup but also across subgroups."
  },
  {
    "objectID": "basic-ui.html#outputs",
    "href": "basic-ui.html#outputs",
    "title": "Basic UI",
    "section": "Outputs",
    "text": "Outputs\n\nText\n\n\nexamples/basic-ui/outputs/text/app.py\n\nfrom shiny import App, ui, render\nimport pandas as pd\n\napp_ui = ui.page_fluid(\n    ui.output_text(\"text\"),\n    ui.output_text_verbatim(\"code\"),\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def text():\n        return \"Hello friend!\"\n    \n    @output\n    @render.text\n    def code():\n        x = pd.Series(range(1, 11))\n        return x.describe()\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nNote\n\n\n\nIn R, text output uses render function renderText() and verbatim output uses render function renderPrint(). In Python, both text and verbatim outputs use the same render function render.text().\n\n\n\n\nTables\n\n\nexamples/basic-ui/outputs/tables/app.py\n\nfrom shiny import App, ui, render\nfrom pydataset import data\n\nmtcars = data(\"mtcars\")\n\napp_ui = ui.page_fluid(\n    ui.output_table(\"static\"),\n    ui.output_data_frame(\"dynamic\"),\n)\n\ndef server(input, output, session):\n    @output\n    @render.table\n    def static():\n        return mtcars\n    \n    @output\n    @render.data_frame\n    def dynamic():\n        return render.DataTable(mtcars, filters=True)\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nNote\n\n\n\nWhile you can return just mtcars in dynamic() for default interactive table, to enable filters, either render.DataGrid() or render.DataTable() needs to be returned with filter=True.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe dynamic table is somewhat different from R version. There may be more ways to render tables by using widgets.\n\n\n\n\nPlots\n\n\nexamples/basic-ui/outputs/plots/app.py\n\nfrom shiny import App, ui, render\nfrom matplotlib import pyplot as plt\n\napp_ui = ui.page_fluid(\n    ui.output_plot(\"plot\", width=\"400px\")\n)\n\ndef server(input, output, session):\n    @output\n    @render.plot\n    def plot():\n        return plt.scatter([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n\napp = App(app_ui, server)\n\n\n\nExercises\n\nText outputs and verbatim outputs\n\nfrom shiny import App, ui, render\nfrom pydataset import data\nfrom scipy.stats import ttest_ind\nimport statsmodels.formula.api as smf\n\nmtcars = data(\"mtcars\")\n\napp_ui = ui.page_fluid(\n    ui.output_text_verbatim(\"summary\"),\n    ui.output_text(\"greeting\"),\n    ui.output_text_verbatim(\"ttest\"),\n    ui.output_text_verbatim(\"regression\"),\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def summary():\n        return mtcars.describe()\n    \n    @output\n    @render.text\n    def greeting():\n        return \"Good morning!\"\n    \n    @output\n    @render.text\n    def ttest():\n        return ttest_ind([1, 2, 3, 4, 5], [2, 3, 4, 5, 6])\n    \n    @output\n    @render.text\n    def regression():\n        reg = smf.ols(\"mpg ~ wt\", data=mtcars).fit()\n        return reg.summary()\n\napp = App(app_ui, server)\n\n\n\n\n\n\nNote\n\n\n\nShiny for Python use render.text() for both text output and verbatim output.\n\n\n\n\n\n\n\n\nNote\n\n\n\nmtcars.describe() returns pandas data frame. When render.text() is used, the output will look like a result of print(mtcars.describe()).\n\n\n\nPlot by seeting height to 300px, witdh to 700px, and “alt” text so that a visually impaired user can tell that its a scatterplot of five random numbers.\n\n\n\nsolutions/basic-ui/outputs/plots/app.py\n\nfrom shiny import App, ui, render\nfrom matplotlib import pyplot as plt\nimport numpy as np\n\napp_ui = ui.page_fluid(\n    ui.output_plot(\"plot\", width=\"700px\", height=\"300px\")\n)\n\ndef server(input, output, session):\n    @output\n    @render.plot(alt=\"A scatterplot of five random numbers\")\n    def plot():\n        return plt.scatter(np.random.uniform(size=5), np.random.uniform(size=5))\n    \napp = App(app_ui, server)\n\n\nDynamic data table without search, search, ordering, and filtering commands.\n\n\n\nsolutions/basic-ui/outputs/tables/app.py\n\nfrom shiny import App, ui, render\nfrom pydataset import data\n\nmtcars = data(\"mtcars\")\n\napp_ui = ui.page_fluid(\n    ui.output_data_frame(\"dynamic\"),\n)\n\ndef server(input, output, session):\n    @output\n    @render.data_frame\n    def dynamic():\n        return render.DataTable(mtcars, filters=False, height='240px')\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nWarning\n\n\n\nThe rendered table still provides ordering commands. I do not know how to disable the ordering command with built-in render functions in shiny python package.\n\n\n\nUse React Table.\n\n\n\n\n\n\n\nCaution\n\n\n\nI could not find a way to render React Table or any other interactive tables that are not included in shiny package.\nI attemped to use ipywidgets via shinywidgets, but my attempt was not quite successful and satisfiable.\nIt looks there have been related discussions on github.\nI hope to come back this exercise once I find a solution."
  },
  {
    "objectID": "basic-reactivity.html#reactive-programming",
    "href": "basic-reactivity.html#reactive-programming",
    "title": "Basic Reactivity",
    "section": "Reactive programming",
    "text": "Reactive programming\n\n\nexamples/basic-reactivity/greeting/app.py\n\nfrom shiny import App, ui, render\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"name\", \"What's your name?\"),\n    ui.output_text(\"greeting\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def greeting():\n        return f\"Hello {input.name()}!\"\n    \napp = App(app_ui, server)\n\n\nReactive expressions\n\n\nexamples/basic-reactivity/reactive-expressions/app.py\n\nfrom shiny import App, ui, render, reactive\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"name\", \"What's your name?\"),\n    ui.output_text(\"greeting\"),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def string():\n        return f\"Hello {input.name()}!\"\n\n    @render.text\n    def greeting():\n        return string()\n    \napp = App(app_ui, server)\n\n\n\nExecution order\n\n\nexamples/basic-reactivity/execution-order/app.py\n\nfrom shiny import App, ui, render, reactive\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"name\", \"What's your name?\"),\n    ui.output_text(\"greeting\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def greeting():\n        return string()\n\n    @reactive.calc\n    def string():\n        return f\"Hello {input.name()}!\"\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "basic-reactivity.html#reactive-expressions-1",
    "href": "basic-reactivity.html#reactive-expressions-1",
    "title": "Basic Reactivity",
    "section": "Reactive expressions",
    "text": "Reactive expressions\n\n\nexamples/basic-reactivity/two-distributions/app.py\n\nfrom shiny import App, ui, render, reactive\nimport pandas as pd\nfrom plotnine import ggplot, geom_freqpoly, aes, coord_cartesian\nfrom scipy.stats import ttest_ind\nimport numpy as np\n\ndef freqpoly(x1, x2, binwidth=0.1, xlim=(-3, 3)):\n    df = pd.DataFrame({\n        \"x\": np.concatenate([x1, x2]),\n        \"g\": [\"x1\"] * len(x1) + [\"x2\"] * len(x2)\n    })\n\n    res = (ggplot(df, aes(\"x\", colour=\"g\"))\n           + geom_freqpoly(binwidth=binwidth, size=1)\n           + coord_cartesian(xlim=xlim))\n    \n    return res\n\ndef t_test(x1, x2):\n    test = ttest_ind(x1, x2)\n    return f\"p value: {test.pvalue:.3f}\\n[{test.confidence_interval().low:.2f}, {test.confidence_interval().high:.2f}]\"\n\napp_ui = ui.page_fluid(\n    ui.row(\n        ui.column(4,\n            \"Distribution 1\",\n            ui.input_numeric(\"n1\", label=\"n\", value=1000, min=1),\n            ui.input_numeric(\"mean1\", label=\"µ\", value=0, step=0.1),\n            ui.input_numeric(\"sd1\", label=\"σ\", value=0.5, min=0.1, step=0.1),\n        ),\n         ui.column(4,\n            \"Distribution 2\",\n            ui.input_numeric(\"n2\", label=\"n\", value=1000, min=1),\n            ui.input_numeric(\"mean2\", label=\"µ\", value=0, step=0.1),\n            ui.input_numeric(\"sd2\", label=\"σ\", value=0.5, min=0.1, step=0.1),\n        ),\n        ui.column(4,\n            \"Frequency polygon\",\n            ui.input_numeric(\"binwidth\", label=\"Bin Width\", value=0.1, step=0.1),\n            ui.input_slider(\"range\", label=\"range\", value=(-3, 3), min=-5, max=5),\n        ),\n    ),\n    ui.row(\n        ui.column(9, ui.output_plot(\"hist\")),\n        ui.column(3, ui.output_text_verbatim(\"ttest\"))\n    ),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def x1():\n        return np.random.normal(input.mean1(), input.sd1(), size=input.n1())\n    \n    @reactive.calc\n    def x2():\n        return np.random.normal(input.mean2(), input.sd2(), size=input.n2())\n\n    @render.plot\n    def hist():\n        return freqpoly(x1(), x2(), binwidth=input.binwidth(), xlim=input.range())\n    \n    @render.text\n    def ttest():\n        return t_test(x1(), x2())\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "basic-reactivity.html#controlling-timing-of-evaluation",
    "href": "basic-reactivity.html#controlling-timing-of-evaluation",
    "title": "Basic Reactivity",
    "section": "Controlling timing of evaluation",
    "text": "Controlling timing of evaluation\n\nTime invalidation\n\n\nexamples/basic-reactivity/timed-invalidation/app.py\n\nfrom shiny import App, ui, render, reactive\nimport pandas as pd\nfrom plotnine import ggplot, geom_freqpoly, aes, coord_cartesian\nimport numpy as np\n\ndef freqpoly(x1, x2, binwidth=0.1, xlim=(-3, 3)):\n    df = pd.DataFrame({\n        \"x\": np.concatenate([x1, x2]),\n        \"g\": [\"x1\"] * len(x1) + [\"x2\"] * len(x2)\n    })\n\n    res = (ggplot(df, aes(\"x\", colour=\"g\"))\n           + geom_freqpoly(binwidth=binwidth, size=1)\n           + coord_cartesian(xlim=xlim))\n    \n    return res\n\napp_ui = ui.page_fluid(\n    ui.row(\n        ui.column(3,\n            ui.input_numeric(\"lambda1\", \"lambda1\", value=3),\n            ui.input_numeric(\"lambda2\", \"lambda2\", value=5),\n            ui.input_numeric(\"n\", \"n\", value=int(1e4), min=0),\n        ),\n        ui.column(9, ui.output_plot(\"hist\"))\n    )\n)\n\ndef server(input, output, session):\n    @reactive.calc()\n    def timer():\n        reactive.invalidate_later(0.5)\n\n    @reactive.calc\n    def x1():\n        timer()\n        return np.random.poisson(input.lambda1(), size=input.n())\n    \n    @reactive.calc\n    def x2():\n        timer()\n        return np.random.poisson(input.lambda2(), size=input.n())\n    \n    @render.plot\n    def hist():\n        return freqpoly(x1(), x2(), binwidth=1, xlim=(0, 40))\n    \napp = App(app_ui, server)\n\n\n\nOn click\n\n\nexamples/basic-reactivity/on-click/app.py\n\nfrom shiny import App, ui, render, reactive\nimport pandas as pd\nfrom plotnine import ggplot, geom_freqpoly, aes, coord_cartesian\nimport numpy as np\n\ndef freqpoly(x1, x2, binwidth=0.1, xlim=(-3, 3)):\n    df = pd.DataFrame({\n        \"x\": np.concatenate([x1, x2]),\n        \"g\": [\"x1\"] * len(x1) + [\"x2\"] * len(x2)\n    })\n\n    res = (ggplot(df, aes(\"x\", colour=\"g\"))\n           + geom_freqpoly(binwidth=binwidth, size=1)\n           + coord_cartesian(xlim=xlim))\n    \n    return res\n\napp_ui = ui.page_fluid(\n    ui.row(\n        ui.column(3,\n            ui.input_numeric(\"lambda1\", \"lambda1\", value=3),\n            ui.input_numeric(\"lambda2\", \"lambda2\", value=5),\n            ui.input_numeric(\"n\", \"n\", value=int(1e4), min=0),\n            ui.input_action_button(\"simulate\", \"Simulate!\"),\n        ),\n        ui.column(9, ui.output_plot(\"hist\")),\n    ),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    @reactive.event(input.simulate, ignore_none=False)\n    def x1():\n        return np.random.poisson(input.lambda1(), size=input.n())\n    \n    @reactive.calc\n    @reactive.event(input.simulate, ignore_none=False)\n    def x2():\n        return np.random.poisson(input.lambda2(), size=input.n())\n    \n    @render.plot\n    def hist():\n        return freqpoly(x1(), x2(), binwidth=1, xlim=(0, 40))\n    \napp = App(app_ui, server)\n\n\n\n\n\n\n\nNote\n\n\n\nSet ignore_none=False to execute the computation before the very first click on the button."
  },
  {
    "objectID": "basic-reactivity.html#observers",
    "href": "basic-reactivity.html#observers",
    "title": "Basic Reactivity",
    "section": "Observers",
    "text": "Observers\n\n\nexamples/basic-reactivity/observers/app.py\n\nfrom shiny import App, ui, render, reactive\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"name\", \"What's your name?\"),\n    ui.output_text(\"greeting\"),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def string():\n        return f\"Hello {input.name()}!\"\n\n    @render.text\n    def greeting():\n        return string()\n    \n    @reactive.effect\n    @reactive.event(input.name)\n    def _():\n        print(\"Greeting performed\")\n    \napp = App(app_ui, server)"
  },
  {
    "objectID": "basic-case-study.html#the-data",
    "href": "basic-case-study.html#the-data",
    "title": "Case Study: ER Injuries",
    "section": "The Data",
    "text": "The Data\nData downloads from Mastering Shiny github repository\n\n\nexamples/basic-case-study/download_data.py\n\nfrom urllib.request import urlretrieve\nimport os\n\nos.mkdir(\"neiss\")\n\ndef download(name):\n    url = f\"https://github.com/hadley/mastering-shiny/raw/main/neiss/{name}\"\n    filename = f\"neiss/{name}\"\n    urlretrieve(url, filename)\n\ndownload(\"injuries.tsv.gz\")\ndownload(\"population.tsv\")\ndownload(\"products.tsv\")"
  },
  {
    "objectID": "basic-case-study.html#exploration",
    "href": "basic-case-study.html#exploration",
    "title": "Case Study: ER Injuries",
    "section": "Exploration",
    "text": "Exploration\n\n\nexamples/basic-case-study/exploration.py\n\nimport pandas as pd\nfrom plotnine import ggplot, geom_line, aes, labs\n\n# data load\ninjuries = pd.read_table(\n    \"neiss/injuries.tsv.gz\", \n    delimiter=\"\\t\", \n    compression=\"gzip\",\n    parse_dates=['trmt_date']\n)\nproducts = pd.read_table(\"neiss/products.tsv\")\npopulation = pd.read_table(\"neiss/population.tsv\")\n\n# product: 649, \"toilets\"\nselected = injuries[injuries['prod_code']==649].copy()\nselected.shape[0]\n\n## basic summaries\nselected.groupby(['location']).agg(n=('weight', 'sum')).sort_values('n', ascending=False).reset_index()\nselected.groupby(['body_part']).agg(n=('weight', 'sum')).sort_values('n', ascending=False).reset_index()\nselected.groupby(['diag']).agg(n=('weight', 'sum')).sort_values('n', ascending=False).reset_index()\n\n## pattern across age and sex\nsummary = selected.groupby(['age', 'sex']).agg(n=('weight', 'sum')).reset_index()\nsummary\n\n(ggplot(summary, aes('age', 'n', colour='sex'))\n + geom_line()\n + labs(y=\"Estimated number of injuries\"))\n\n## injury rate\nsummary = selected.groupby(['age', 'sex']).agg(n=('weight', 'sum')).reset_index().\\\n    merge(population, how='left', on=['age', 'sex'])\nsummary['rate'] = summary['n'] / summary['population'] * 1e4\n\n(ggplot(summary, aes('age', 'rate', colour='sex'))\n + geom_line(na_rm=True)\n + labs(y=\"Injuries per 10,000 people\"))\n\n## narratives\nselected.sample(10)['narrative']"
  },
  {
    "objectID": "basic-case-study.html#app",
    "href": "basic-case-study.html#app",
    "title": "Case Study: ER Injuries",
    "section": "App",
    "text": "App\nA final app as a result of the following sections in Mastering Shiny book: Prototype, Polish table, Rate versus count, and Narrative.\n\n\nexamples/basic-case-study/app.py\n\nfrom shiny import App, ui, render, reactive\nimport pandas as pd\nfrom plotnine import ggplot, geom_line, aes, labs\nimport numpy as np\n\n# data load\ninjuries = pd.read_table(\n    \"neiss/injuries.tsv.gz\", \n    delimiter=\"\\t\", \n    compression=\"gzip\",\n    parse_dates=['trmt_date']\n)\nproducts = pd.read_table(\"neiss/products.tsv\")\npopulation = pd.read_table(\"neiss/population.tsv\")\n\nprod_codes = dict(zip(products['prod_code'], products['title']))\n\ndef count_top(df, var, n=5):\n    df = df.copy()\n    freq = df.value_counts(var)[:n].index.values\n    df[var] = pd.Categorical(np.where(np.isin(df[var], freq), df[var], \"Other\"), \n                             categories=list(freq)+[\"Other\"], ordered=True)\n    res = df.groupby([var], observed=False).agg(n=('weight', 'sum')).reset_index()\n    res['n'] = res['n'].astype(np.int64)\n    return res\n\napp_ui = ui.page_fluid(\n    ui.row(\n        ui.column(8,\n            ui.input_select(\"code\", \"Product\", choices=prod_codes, width=\"100%\"),\n        ),\n        ui.column(2, \n            ui.input_select(\"y\", \"Y axis\", choices=[\"rate\", \"count\"]),\n        ),\n    ),\n    ui.row(\n        ui.column(4, ui.output_table(\"diag\")),\n        ui.column(4, ui.output_table(\"body_part\")),\n        ui.column(4, ui.output_table(\"location\")),\n    ),\n    ui.row(\n        ui.column(12, ui.output_plot(\"age_sex\")),\n    ),\n    ui.row(\n        ui.column(2, ui.input_action_button(\"story\", \"Tell me a story\")),\n        ui.column(10, ui.output_text(\"narrative\")),\n    ),    \n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def selected():\n        return injuries[injuries['prod_code']==int(input.code())].copy()\n    \n    @render.table(classes='table shiny-table w-100')\n    def diag():\n        return count_top(selected(), 'diag')\n\n    @render.table(classes='table shiny-table w-100')\n    def body_part():\n        return count_top(selected(), 'body_part')\n\n    @render.table(classes='table shiny-table w-100')\n    def location():\n        return count_top(selected(), 'location')\n\n    @reactive.calc\n    def summary():\n        res = selected().groupby(['age', 'sex']).agg(n=('weight', 'sum')).reset_index().\\\n            merge(population, how='left', on=['age', 'sex'])\n        res['rate'] = res['n'] / res['population'] * 1e4\n\n        return res\n    \n    @render.plot\n    def age_sex():\n        if input.y()==\"count\":\n            res = (ggplot(summary(), aes('age', 'n', colour='sex'))\n                   + geom_line(na_rm=True)\n                   + labs(y=\"Estimated number of injuries\"))\n        else:\n            res = (ggplot(summary(), aes('age', 'rate', colour='sex'))\n                   + geom_line(na_rm=True)\n                   + labs(y=\"Injuries per 10,000 people\"))\n\n        return res\n    \n    @reactive.calc\n    @reactive.event(input.story, selected)\n    def narrative_sample():\n        return selected()['narrative'].sample(1).squeeze()\n\n    @render.text\n    def narrative():\n        return narrative_sample()\n    \n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nWarning\n\n\n\nThis app does not provide the same text-alignment to the book example. In Mastering Shiny book, in tables, text value columns are left aligned while numeric value columns are right aligned."
  },
  {
    "objectID": "basic-case-study.html#exercises",
    "href": "basic-case-study.html#exercises",
    "title": "Case Study: ER Injuries",
    "section": "Exercises",
    "text": "Exercises\nCombine Exercieses 3 & 4:\n\nAdd an input control that lets the user decide how many rows to show in the summary table.\nProvide a way to step through every narrative systematically with forward and backward buttons. Make the list of narratives “circular” so that advancing forward from the last narrative takes you to the first.\n\n\n\nsolutions/basic-case-study/app.py\n\nfrom shiny import App, ui, render, reactive\nimport pandas as pd\nfrom plotnine import ggplot, geom_line, aes, labs\nimport numpy as np\n\n# data load\ninjuries = pd.read_table(\n    \"neiss/injuries.tsv.gz\", \n    delimiter=\"\\t\", \n    compression=\"gzip\",\n    parse_dates=['trmt_date']\n)\nproducts = pd.read_table(\"neiss/products.tsv\")\npopulation = pd.read_table(\"neiss/population.tsv\")\n\nprod_codes = dict(zip(products['prod_code'], products['title']))\n\ndef count_top(df, var, n=5):\n    df = df.copy()\n    freq = df.value_counts(var)[:n].index.values\n    df[var] = pd.Categorical(np.where(np.isin(df[var], freq), df[var], \"Other\"), \n                             categories=list(freq)+[\"Other\"], ordered=True)\n    res = df.groupby([var], observed=False).agg(n=('weight', 'sum')).reset_index()\n    res['n'] = res['n'].astype(np.int64)\n    return res\n\napp_ui = ui.page_fluid(\n    ui.row(\n        ui.column(8,\n            ui.input_select(\"code\", \"Product\", choices=prod_codes, width=\"100%\"),\n        ),\n        ui.column(2, \n            ui.input_select(\"y\", \"Y axis\", choices=[\"rate\", \"count\"]),\n        ),\n        ui.column(2,\n            ui.input_numeric(\"n\", \"Top N values\", value=5, min=1),\n        ),\n    ),\n    ui.row(\n        ui.column(4, ui.output_table(\"diag\")),\n        ui.column(4, ui.output_table(\"body_part\")),\n        ui.column(4, ui.output_table(\"location\")),\n    ),\n    ui.row(\n        ui.column(12, ui.output_plot(\"age_sex\")),\n    ),\n    ui.row(\n        ui.column(1, ui.input_action_button(\"backward\", \"Prev\")),\n        ui.column(1, ui.input_action_button(\"forward\", \"Next\")),\n        ui.column(10, ui.output_text(\"narrative\")),\n    ),    \n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def selected():\n        return injuries[injuries['prod_code']==int(input.code())].copy()\n    \n    @render.table(classes='table shiny-table w-100')\n    def diag():\n        return count_top(selected(), 'diag', n=input.n())\n\n    @render.table(classes='table shiny-table w-100')\n    def body_part():\n        return count_top(selected(), 'body_part', n=input.n())\n\n    @render.table(classes='table shiny-table w-100')\n    def location():\n        return count_top(selected(), 'location', n=input.n())\n\n    @reactive.calc\n    def summary():\n        res = selected().groupby(['age', 'sex']).agg(n=('weight', 'sum')).reset_index().\\\n            merge(population, how='left', on=['age', 'sex'])\n        res['rate'] = res['n'] / res['population'] * 1e4\n\n        return res\n    \n    @render.plot\n    def age_sex():\n        if input.y()==\"count\":\n            res = (ggplot(summary(), aes('age', 'n', colour='sex'))\n                   + geom_line(na_rm=True)\n                   + labs(y=\"Estimated number of injuries\"))\n        else:\n            res = (ggplot(summary(), aes('age', 'rate', colour='sex'))\n                   + geom_line(na_rm=True)\n                   + labs(y=\"Injuries per 10,000 people\"))\n\n        return res\n    \n    current = reactive.value(0)\n\n    @reactive.effect\n    @reactive.event(selected)\n    def _():\n        current.set(0)\n\n    @reactive.effect\n    @reactive.event(input.backward)\n    def _():\n        if current() &gt; 0:\n            current.set(current() - 1)\n        else:\n            current.set(selected().shape[0] - 1)\n    \n    @reactive.effect\n    @reactive.event(input.forward)\n    def _():\n        if current() &lt; selected().shape[0] - 1:\n            current.set(current() + 1)\n        else:\n            current.set(0)\n\n    @render.text\n    def narrative():\n        return selected()['narrative'].values[current()]\n    \n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nNote\n\n\n\nIn the solution, I used reactive.value which is explained here."
  },
  {
    "objectID": "action-workflow.html#development-workflow",
    "href": "action-workflow.html#development-workflow",
    "title": "Workflow",
    "section": "Development workflow",
    "text": "Development workflow\n\nCreating the app\n\nOn VS code, if you already have your future app.py open, type shinyapp, then press Tab to insert the shiny app snippet.\n\n\n\nexamples/action-workflow/snippet/app.py\n\nfrom shiny import Inputs, Outputs, Session, App, reactive, render, req, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 20),\n    ui.output_text_verbatim(\"txt\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nNote\n\n\n\nshinyapp snippet is available with installation of VS Code Shiny for Python extention.\n\n\n\n\n\n\n\n\nNote\n\n\n\nIt imports more modules from shiny. For example, it imports Inputs, Outputs and Sessions to specify parameter types for server() function. It also imports req module that will be covered in later chapters."
  },
  {
    "objectID": "action-workflow.html#debugging",
    "href": "action-workflow.html#debugging",
    "title": "Workflow",
    "section": "Debugging",
    "text": "Debugging\n\nTracebacks in Shiny\nThe following app is to demonstrate how the traceback appears in the console.\n\n\nexamples/action-workflow/traceback/app.py\n\nfrom shiny import Inputs, Outputs, Session, App, reactive, render, req, ui\nfrom pydataset import data\nfrom matplotlib import pyplot as plt\n\ncars = data('cars')\n\ndef f(x):\n    return g(x)\n\ndef g(x):\n    return h(x)\n\ndef h(x):\n    return x**2\n\napp_ui = ui.page_fluid(\n    ui.input_select(\"n\", \"N\", list(range(1, 11))),\n    ui.output_plot(\"plot\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.plot\n    def plot():\n        n = f(input.n())\n        return plt.scatter(cars[:n]['speed'], cars[:n]['dist'])\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nNote\n\n\n\nInstead of x * 2 in R example in the book, I used x**2 as return value of function h(x) to cause an error when function f() is called in the app. If we write def h(x): return x * 2, it will cause an error not when calling f() but when slicing data frame with cars[:n].\n\n\nIf you run this app, you’ll see an error message in the app and a traceback in the console:\n\n\n\n\n\n\nNote\n\n\n\nI masked my work directory path with {...} because it will be different from your machine.\n\n\nTraceback (most recent call last):\n  File \"{...}/.venv/lib/python3.11/site-packages/shiny/session/_session.py\", line 1025, in output_obs\n    message[output_name] = renderer_fn()\n                           ^^^^^^^^^^^^^\n  File \"{...}/.venv/lib/python3.11/site-packages/shiny/render/transformer/_transformer.py\", line 407, in __call__\n    return run_coro_sync(self._run())\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"{...}/.venv/lib/python3.11/site-packages/shiny/_utils.py\", line 304, in run_coro_sync\n    coro.send(None)\n  File \"{...}/.venv/lib/python3.11/site-packages/shiny/render/transformer/_transformer.py\", line 322, in _run\n    ret = await self._transformer(\n          ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"{...}/.venv/lib/python3.11/site-packages/shiny/render/_render.py\", line 159, in PlotTransformer\n    x = await resolve_value_fn(_fn)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"{...}/.venv/lib/python3.11/site-packages/shiny/render/transformer/_transformer.py\", line 802, in resolve_value_fn\n    return value_fn()\n           ^^^^^^^^^^\n  File \"{...}/examples/action-workflow/traceback/app.py\", line 26, in plot\n    n = f(input.n())\n        ^^^^^^^^^^^^\n  File \"{...}/examples/action-workflow/traceback/app.py\", line 8, in f\n    return g(x)\n           ^^^^\n  File \"{...}/examples/action-workflow/traceback/app.py\", line 11, in g\n    return h(x)\n           ^^^^\n  File \"{...}/examples/action-workflow/traceback/app.py\", line 14, in h\n    return x**2\n           ~^^~\nTypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'\n\n\n\n\n\n\nNote\n\n\n\nIn contrast to Shiny for R, Shiny for Python shows trackback in a sequence of calls.\n\n\nTo fix error, you would want to do type casting like n = f(int(input.n())).\n\n\nexamples/action-workflow/traceback/correct-app.py\n\nfrom matplotlib import pyplot as plt\n\ncars = data('cars')\n\ndef f(x):\n    return g(x)\n\ndef g(x):\n    return h(x)\n\ndef h(x):\n    return x**2\n\napp_ui = ui.page_fluid(\n    ui.input_select(\"n\", \"N\", list(range(1, 11))),\n    ui.output_plot(\"plot\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.plot\n    def plot():\n        n = f(int(input.n()))\n        return plt.scatter(cars[:n]['speed'], cars[:n]['dist'])\n\napp = App(app_ui, server)\n\n\n\nCase study\n\n\nexamples/action-workflow/sales-dashboard/app.py\n\nfrom shiny import App, reactive, render, ui\nimport pandas as pd\n\nsales = pd.read_csv(\"sales-dashboard/sales_data_sample.csv\", \n                    sep=\",\", encoding=\"Latin-1\", \n                    na_values=[\"\", \"NaN\"], keep_default_na=False)\nsales = sales[[\"TERRITORY\", \"ORDERDATE\", \"ORDERNUMBER\", \"PRODUCTCODE\", \n               \"QUANTITYORDERED\", \"PRICEEACH\"]]\n\napp_ui = ui.page_fluid(\n    ui.input_select(\"territory\", \"territory\", choices=list(sales[\"TERRITORY\"].unique())),\n    ui.output_table(\"selected\"),\n)\n\n\ndef server(input, output, session):\n    @reactive.calc\n    def selected():\n        return sales[sales[\"TERRITORY\"]==input.territory()]\n\n    @output(id=\"selected\")\n    @render.table\n    def print_selected():\n        return selected()[:11]\n\napp = App(app_ui, server)\n\n\n\nDebugging reactivity\nIn Shiny for R, to use print debugging for reactives, it is recommended to send to message to “standard error” by using message() instead of “standard output” by using print(). Messages that are printed to the standard error stream are recorded in the log.\n\n\n\n\n\n\nCaution\n\n\n\nI actually do not know whether the “standard output” vs “standard error” argument still holds for Shiny for Python. I hope to come back to this once I deploy a Shiny app elsewhere.\n\n\nThis article shows “3 ways to print to the standard error stream in Python”:\n\nCall built-in print() function with file=sys.stderr\nCall stderr.write() function in sys package\nUse logging package\n\nFirst, let us see an example of using the first two. In the code below, side effect _() uses print() with file=sys.stderr, and the reactive expression total() uses sys.stderr.write().\n\n\nexamples/action-workflow/print-debugging/app.py\n\nfrom shiny import App, ui, render, reactive\nimport sys\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"x\", \"x\", value=1, min=0, max=10),\n    ui.input_slider(\"y\", \"y\", value=2, min=0, max=10),\n    ui.input_slider(\"z\", \"z\", value=3, min=0, max=10),\n    ui.output_text(\"total\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.x)\n    def _():\n        print(f\"Updating y from {input.y()} to {input.x() * 2}\", file=sys.stderr)\n        ui.update_slider(\"y\", value=input.x()*2, session=session)\n    \n    @reactive.calc\n    def total():\n        total = input.x() + input.y() + input.z()\n        sys.stderr.write(f\"New total is {total}\\n\")\n        return total\n    \n    @output(id=\"total\")\n    @render.text\n    def print_total():\n        return total()\n    \napp = App(app_ui, server)\n\n\n\n\n\n\n\nNote\n\n\n\nWhen using sys.stderr.write(), please include newline character \\n at the end of message.\n\n\n\n\n\n\n\n\nNote\n\n\n\nDynamic UI implementation with ui.update_*() in the server function will be discussed in later chapter.\n\n\nThe third option, logging, may provide more flexibility including setting the threshold of logging, e.g. 'INFO', 'WARNING', etc.\n\n\nexamples/action-workflow/print-debugging/app-logging.py\n\nfrom shiny import App, ui, render, reactive\nimport logging\n\n# configure logging\nlogging.basicConfig(format='%(message)s')\nlog = logging.getLogger('shiny.debugging')\nlog.setLevel('INFO')\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"x\", \"x\", value=1, min=0, max=10),\n    ui.input_slider(\"y\", \"y\", value=2, min=0, max=10),\n    ui.input_slider(\"z\", \"z\", value=3, min=0, max=10),\n    ui.output_text(\"total\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.x)\n    def _():\n        log.info(f\"Updating y from {input.y()} to {input.x() * 2}\")\n        ui.update_slider(\"y\", value=input.x()*2, session=session)\n    \n    @reactive.calc\n    def total():\n        total = input.x() + input.y() + input.z()\n        log.info(f\"New total is {total}\")\n        return total\n    \n    @output(id=\"total\")\n    @render.text\n    def print_total():\n        return total()\n    \napp = App(app_ui, server)"
  },
  {
    "objectID": "action-layout.html#single-page-layout",
    "href": "action-layout.html#single-page-layout",
    "title": "Layout, themes, HTML",
    "section": "Single page layout",
    "text": "Single page layout\n\nPage with sidebar\nThe following app that use ui.panel_sidebar() and ui.panel_main() provides a similar-looking app the Mastering Shiny book example.\n\n\nexamples/action-layout/sidebar/app-panel.py\n\nfrom shiny import App, ui, render\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\napp_ui = ui.page_fluid(\n    ui.panel_title(\"Central limit theorem\"),\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_numeric(\"m\", \"Number of samples:\", 2, min=1, max=100),\n        ),\n        ui.panel_main(\n            ui.output_plot(\"hist\"),\n        ),        \n    ),\n)\n\ndef server(input, output, session):\n    @render.plot\n    def hist():\n        means = [np.mean(np.random.uniform(size=input.m())) for _ in range(10000)]\n\n        fig, ax = plt.subplots()\n        ax.hist(means, bins=20)\n        return fig\n    \napp = App(app_ui, server)\n\n\n\n\n\n\n\nNote\n\n\n\nui.panel_sidebar() and ui.panel_main() have been deprecated since 2023-10-30 release. Per recommendation in the change log, in ui.layout_sidebar() call, I used sidebar() as sidebar arguement and passed main panel contents directly to args.\n\n\nui.panel_sidebar() and ui.panel_main() have been deprecated since 2023-10-30 release, and the following code is based on newly recommended sidebar implementation.\n\n\nexamples/action-layout/sidebar/app.py\n\nfrom shiny import App, ui, render\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\napp_ui = ui.page_fluid(\n    ui.panel_title(\"Central limit theorem\"),\n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_numeric(\"m\", \"Number of samples:\", 2, min=1, max=100)\n        ),\n        ui.output_plot(\"hist\"),\n    ),\n)\n\ndef server(input, output, session):\n    @render.plot\n    def hist():\n        means = [np.mean(np.random.uniform(size=input.m())) for _ in range(10000)]\n\n        fig, ax = plt.subplots()\n        ax.hist(means, bins=20)\n        return fig\n    \napp = App(app_ui, server)\n\n\n\nExercises\n\nRe-create sidebar layout app’s appearance using ui.row() and ui.column().\n\n\n\nsolutions/action-layout/recreate-sidebar/app.py\n\nfrom shiny import App, ui, render\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\napp_ui = ui.page_fluid(\n    ui.panel_title(\"Central limit theorem\"),\n    ui.row(\n        ui.column(4,\n            ui.input_numeric(\"m\", \"Number of samples:\", 2, min=1, max=100),\n        ),\n        ui.column(8,\n            ui.output_plot(\"hist\"),\n        ),\n    ),\n)\n\ndef server(input, output, session):\n    @render.plot\n    def hist():\n        means = [np.mean(np.random.uniform(size=input.m())) for _ in range(10000)]\n\n        fig, ax = plt.subplots()\n        ax.hist(means, bins=20)\n        return fig\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nNote\n\n\n\nThis app approximately recreates appearance of an old-style app that uses ui.panel_sidebar() and ui.panel_main(), but not a new-style app that uses ui.sidebar().\n\n\n\nModify the central limit theorem app to put the sidebar on the right instead of the left.\n\n\n\nsolutions/action-layout/right-sidebar/app.py\n\nfrom shiny import App, ui, render\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\napp_ui = ui.page_fluid(\n    ui.panel_title(\"Central limit theorem\"),\n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_numeric(\"m\", \"Number of samples:\", 2, min=1, max=100),\n            position='right',\n        ),\n        ui.output_plot(\"hist\"),\n    ),\n)\n\ndef server(input, output, session):\n    @render.plot\n    def hist():\n        means = [np.mean(np.random.uniform(size=input.m())) for _ in range(10000)]\n\n        fig, ax = plt.subplots()\n        ax.hist(means, bins=20)\n        return fig\n    \napp = App(app_ui, server)\n\n\nCreate multirow layout app with two plots\n\n\n\nsolutions/action-layout/multirow/app.py\n\nfrom shiny import App, ui, render, reactive\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\napp_ui = ui.page_fluid(\n    ui.panel_title(\"Central limit theorem\"),\n    ui.row(\n        ui.column(6, \n            ui.output_plot(\"hist\"),\n        ),\n        ui.column(6,\n            ui.output_plot(\"freqploy\"),\n        ),\n    ),\n    ui.row(\n        ui.input_numeric(\"m\", \"Number of samples:\", 2, min=1, max=100),\n    ),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def means():\n        return [np.mean(np.random.uniform(size=input.m())) for _ in range(10000)]\n\n    @render.plot\n    def hist():\n        fig, ax = plt.subplots()\n        ax.hist(means(), bins=20)\n        return fig\n    \n    @render.plot\n    def freqploy():\n        counts, bins = np.histogram(means(), bins=20)\n        return plt.plot(bins[:-1], counts)\n    \napp = App(app_ui, server)"
  },
  {
    "objectID": "action-layout.html#multipage-layouts",
    "href": "action-layout.html#multipage-layouts",
    "title": "Layout, themes, HTML",
    "section": "Multipage layouts",
    "text": "Multipage layouts\n\nTabsets\n\n\nexamples/action-layout/tabset-ui/app.py\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_tab(\n        ui.nav_panel(\"Import data\",\n            ui.input_file(\"file\", \"Data\", button_label=\"Upload...\"),\n            ui.input_text(\"delim\", \"Delimiter (leave blank to guess)\", \"\"),\n            ui.input_numeric(\"skip\", \"Rows to skip\", 0, min=0),\n            ui.input_numeric(\"rows\", \"Rows to preview\", 10, min=1),\n        ),\n        ui.nav_panel(\"Set parameters\"),\n        ui.nav_panel(\"Visualise results\"),\n    )\n)\n\ndef server(input, output, session):\n    ...\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nNote\n\n\n\nui.nav() has been deprecated since 2023-12-18 in favor of ui.nav_panel().\n\n\n\n\nexamples/action-layout/tabset-server/app.py\n\nfrom shiny import App, ui, render\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.output_text(\"panel\"),\n        ),\n        ui.navset_tab(\n            ui.nav_panel(\"panel 1\", \"one\"),\n            ui.nav_panel(\"panel 2\", \"two\"),\n            ui.nav_panel(\"panel 3\", \"three\"),\n            id=\"tabset\",\n        ),\n    ),\n)\n\ndef server(input, output, session):\n    @render.text\n    def panel():\n        return f\"Current panel: {input.tabset()}\"\n\napp = App(app_ui, server)\n\n\n\nNavlists and Navbars\n\n\nexamples/action-layout/navlist/app.py\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_pill_list(\n        ui.nav_control(\n            ui.h3(\"Heading 1\")\n        ),\n        ui.nav_panel(\"panel 1\", \"Panel one contents\"),\n        ui.nav_control(\n            ui.h3(\"Heading 2\")\n        ),\n        ui.nav_panel(\"panel 2\", \"Panel two contents\"),\n        ui.nav_panel(\"panel 3\", \"Panel three contents\"),\n        id=\"tabset\",\n    ),\n)\n\napp = App(app_ui, None)\n\n\n\n\n\n\n\nNote\n\n\n\nUse ui.nav_control() to put a typical general UI item. Passing just ui.h3(\"Heading 1\") without ui.nav_control() will cause an error becuase nav items must be NavSetArg type.\n\n\n\n\n\n\n\n\nTip\n\n\n\nFor UI-only app, i.e. no server function, you can set server=None in App().\n\n\n\n\nexamples/action-layout/navbar/app.py\n\nfrom shiny import App, ui\n\napp_ui = ui.page_navbar(\n    ui.nav_control(ui.h4(\"Page title\")),\n    ui.nav_panel(\"panel 1\", \"one\"),\n    ui.nav_panel(\"panel 2\", \"two\"),\n    ui.nav_panel(\"panel 3\", \"three\"),\n    ui.nav_menu(\"subpanels\",\n        ui.nav_panel(\"panel 4a\", \"four-a\"),\n        ui.nav_panel(\"panel 4b\", \"four-b\"),\n        ui.nav_panel(\"panel 4c\", \"four-c\"),\n    ),\n)\n\napp = App(app_ui, None)"
  },
  {
    "objectID": "action-layout.html#themes",
    "href": "action-layout.html#themes",
    "title": "Layout, themes, HTML",
    "section": "Themes",
    "text": "Themes\n\nShiny themes\nUse {shinyswatch} package\n\n\nexamples/action-layout/shiny-theme/app.py\n\nfrom shiny import App, ui\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    shinyswatch.theme.darkly(),\n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_text(\"txt\", \"Text input:\", \"text here\"),\n            ui.input_slider(\"slider\", \"Slider input:\", min=1, max=100, value=30),\n        ),\n        ui.h1(\"Theme: darkly\"),\n        ui.h2(\"Header 2\"),\n        ui.p(\"Some text\"),\n    ),\n)\n\napp = App(app_ui, None)\n\n\n\nPlot themes\n\n\n\n\n\n\nImportant\n\n\n\nI could not find a way to make a theme to be consistent between app and plot. I hope to come back this topic once I become to know how to apply bottswatch theme to plot."
  },
  {
    "objectID": "action-layout.html#under-the-hood",
    "href": "action-layout.html#under-the-hood",
    "title": "Layout, themes, HTML",
    "section": "Under the hood",
    "text": "Under the hood\nLet us first define CSS class in file:\n\n\ncss/my-style.css\n\n.my-class {\n    font-size: 3rem;\n    background-color: pink;\n    font-weight: bold\n  }\n\nThen, let us write HTML with the CSS and add to the UI by using ui.HTML().\n\n\nexamples/action-layout/html-css/app.py\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.include_css(\"css/my-style.css\"),\n    ui.HTML(r\"\"\"\n        &lt;h1&gt;This is a heading&lt;/h1&gt;\n        &lt;p class=\"my-class\"&gt;This is some text!&lt;/p&gt;\n        &lt;ul&gt;\n            &lt;li&gt;First bullet&lt;/li&gt;\n            &lt;li&gt;Second bullet&lt;/li&gt;\n        &lt;/ul&gt;        \n        \"\"\")\n)\n\napp = App(app_ui, None)\n\n\n\n\n\n\n\nNote\n\n\n\nui.include_css() is used to add CSS files.\n\n\nYou can use the HTML helper that Shiny provides.\n\n\nexamples/action-layout/html-helper/app.py\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.include_css(\"css/my-style.css\"),\n    ui.h1(\"This is heading\"),\n    ui.p(\"This is some text\", class_=\"my-class\"),\n    ui.tags.ul(\n        ui.tags.li(\"First bullet\"),\n        ui.tags.li(\"Second bullet\"),\n    ),\n)\n\napp = App(app_ui, None)\n\n\n\n\n\n\n\nImportant\n\n\n\nWhen applying a CSS class, note that the parameter name class_ includes underscore _. Parameter name without underscore will throw an error.\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor the most important elements tag functions h1() and p(), Shiny’s ui module provides a top level functions. Others can be asccessed via tags submodule.\n\n\nAn example of interweaving Shiny component into a custom structure.\n\n\nexamples/action-layout/html-shiny-component/app.py\n\nfrom shiny import App, ui, render\n\napp_ui = ui.page_fluid(\n    ui.p(\n        \"You made \",\n        ui.tags.b(\"$\", ui.output_text(\"amount\", inline=True)),\n        \" in the last \",\n        ui.output_text(\"days\", inline=True),\n        \" days \",\n    ),\n)\n\ndef server(input, output, session):\n    @render.text\n    def amount():\n        return 249\n    \n    @render.text\n    def days():\n        return 7\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nNote\n\n\n\nCall ui.output_text() with inline=True to display the output text inline with other elements."
  },
  {
    "objectID": "action-graphics.html#interactivity",
    "href": "action-graphics.html#interactivity",
    "title": "Graphics",
    "section": "Interactivity",
    "text": "Interactivity\n\nBasics\nTo handle events on plot, pass boolean arguments for click, dblclick, hover, and brush. Their values will be accessed via combination of output plot ID and event type.\n\nclick: the value will be accessed via input.{id}_click(), where {id} is replaced with ID of the plot. The input value will be a dictionary with x and y elements indicating the mouse position.\ndblclick: the value will be accessed via input.{id}_dblclick(), where {id} is replaced with ID of the plot. The input value will be a dictionary with x and y elements indicating the mouse position.\nhover: the value will be accessed via input.{id}_hover(), where {id} is replaced with ID of the plot. The input value will be a dictionary with x and y elements indicating the mouse position.\nbrush: the value will be accessed via input.{id}_brush(), where {id} is replaced with ID of the plot. The value will be a dictionary with xmin, xmax, ymin, and ymax elements indicating the brush area.\n\n\n\nexamples/action-graphics/plot-click/app.py\n\nfrom shiny import App, render, ui, req\nfrom matplotlib import pyplot as plt\nfrom pydataset import data\n\nmtcars = data(\"mtcars\")\n\napp_ui = ui.page_fluid(\n    ui.output_plot(\"plot\", click=True),\n    ui.output_text_verbatim(\"info\"),\n)\n\ndef server(input, output, session):\n    @render.plot\n    def plot():\n        res = plt.scatter(mtcars['wt'], mtcars['mpg'])\n        return res\n    \n    @render.text\n    def info():\n        req(input.plot_click())\n        x = round(input.plot_click()['x'], 2)\n        y = round(input.plot_click()['y'], 2)\n        return f\"[{x}, {y}]\"\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nNote\n\n\n\nreq() is used to make sure that the app does not do anything before the first click. This will be more discussed in later chapters.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nIt did not work well with plot created by using {plotnine} package; the mouse position in input value did not align with actual event. For example, a snapshot below shows that I dragged a region for [2, 3] on x-axis and [20, 30] on y-axis, but the input values were read as [1.7, 2.9] for x-axis and [21.9, 30.6] for y-axis.\n\n\n\nInput value for {plotline} plots does not align with actual user input on app.\n\n\n\n\n\n\nClicking\nPrints data points near the click.\n\n\nexamples/action-graphics/near-points/app.py\n\nfrom shiny import App, render, ui, req\nfrom matplotlib import pyplot as plt\nfrom pydataset import data\nimport numpy as np\nfrom sklearn.metrics import pairwise_distances\n\nmtcars = data(\"mtcars\")\n\n# near_points(mtcars, {'x': 3.5, 'y': 15}, 'wt', 'mpg')\ndef near_points(df, position, xvar, yvar, threshold=20):\n    points = df[[xvar, yvar]].copy().to_numpy()\n    click = np.array([[position['x'], position['y']]])\n\n    # Convert data into different scale\n    # For now, put some logic\n    # TO DO: revise with correct formula to convert it to pixel scale\n    min_xvar = min([position['domain']['left'], position['domain']['right']])\n    max_xvar = max([position['domain']['left'], position['domain']['right']])\n    min_yvar = min([position['domain']['bottom'], position['domain']['top']])\n    max_yvar = max([position['domain']['bottom'], position['domain']['top']])\n\n    range_x = position['range']['right'] - position['range']['left']\n    range_y = position['range']['top'] - position['range']['bottom']\n\n    points[:,0] = position['range']['left'] + (points[:,0] - min_xvar) / (max_xvar - min_xvar) * range_x\n    click[:,0] = position['range']['left'] + (click[:,0] - min_xvar) / (max_xvar - min_xvar) * range_x\n    points[:,1] = position['range']['bottom'] + (points[:,1] - min_yvar) / (max_yvar - min_yvar) * range_y\n    click[:,1] = position['range']['bottom'] + (click[:,1] - min_yvar) / (max_yvar - min_yvar) * range_y\n    \n    # Find points within threshold\n    # For now, just list in a sequence of appearance in data\n    # TO DO: sort by distance from closest to farthest\n    near = pairwise_distances(points, click) &lt; threshold\n    return df[near]\n\n\napp_ui = ui.page_fluid(\n    ui.output_plot(\"plot\", click=True),\n    ui.output_table(\"data\"),\n)\n\ndef server(input, output, session):\n    @render.plot\n    def plot():\n        res = plt.scatter(mtcars['wt'], mtcars['mpg'])\n        return res\n    \n    @render.table\n    def data():\n        req(input.plot_click())\n        return near_points(mtcars, input.plot_click(), xvar='wt', yvar='mpg')\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nCaution\n\n\n\nI could not find a function in Shiny for Python that is corresponding to nearPoints() in Shiny for R, so I implemented my own function near_points(). It does not behave exactly same to the R function, and I hope to find a better implementation.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nIn my experiment, the table frequently disappears immediately after appearing on a screen, and I do not know the exact reason.\n\n\n\n\nBrushing\n\n\nexamples/action-graphics/brushing/app.py\n\nfrom shiny import App, render, ui, req\nfrom matplotlib import pyplot as plt\nfrom pydataset import data\n\nmtcars = data(\"mtcars\")\n\n# brushed_points(mtcars, {'xmin': 2, 'xmax': 3, 'ymin': 20, 'ymax': 30}, 'wt', 'mpg')\ndef brushed_points(df, position, xvar, yvar):\n    in_region = ((df[xvar] &gt; position['xmin']) \n                 & (df[xvar] &lt; position['xmax'])\n                 & (df[yvar] &gt; position['ymin'])\n                 & (df[yvar] &lt; position['ymax']))\n    \n    return df[in_region]\n\n\napp_ui = ui.page_fluid(\n    ui.output_plot(\"plot\", brush=True),\n    ui.output_table(\"data\"),\n)\n\ndef server(input, output, session):\n    @render.plot\n    def plot():\n        res = plt.scatter(mtcars['wt'], mtcars['mpg'])\n        return res\n    \n    @render.table\n    def data():\n        req(input.plot_brush())\n        return brushed_points(mtcars, input.plot_brush(), xvar='wt', yvar='mpg')\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nCaution\n\n\n\nI could not find a function in Shiny for Python that is corresponding to brushedPoints() in Shiny for R, so I implemented my own function brushed_points().\n\n\n\n\nModifying the plot\nResizing point size in a scatter plot\n\n\nexamples/action-graphics/resizing/app.py\n\nfrom shiny import App, ui, render, reactive\nimport pandas as pd\nimport numpy as np\nfrom sklearn.metrics import pairwise_distances\nfrom matplotlib import pyplot as plt\n\nnp.random.seed(1014)\ndf = pd.DataFrame({\n    'x': np.random.normal(size=100),\n    'y': np.random.normal(size=100)\n})\n\ndef compute_distance(df, position, xvar, yvar):\n    points = df[[xvar, yvar]].copy().to_numpy()\n    click = np.array([[position['x'], position['y']]])\n\n    # Compute distance\n    dist = pairwise_distances(points, click)\n\n    return dist\n\napp_ui = ui.page_fluid(\n    ui.output_plot(\"plot\", click=True),\n)\n\ndef server(input, output, session):\n    dist = reactive.value([1 for _ in range(df.shape[0])])\n\n    @reactive.effect\n    @reactive.event(input.plot_click)\n    def _():\n        dist.set(compute_distance(df, input.plot_click(), xvar='x', yvar='y'))\n    \n    @render.plot\n    def plot():\n        size = np.minimum(np.power(dist.get(), 5), 300)\n        res = plt.scatter(df['x'], df['y'], s=size)\n        return res\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nNote\n\n\n\nR example in Mastering Shiny book used R function nearPoints(), which is a built-in function in {shiny} R package, to compute distance between mouse click position and every each point in the plot in pixel scale. Because Shiny for Python does not have equivalent built-in function, I revised an example to compute the distance in original data scale and use a derived value from the distance as a size of each point.\n\n\nChanging point color\nfrom shiny import App, render, ui, reactive\nfrom matplotlib import pyplot as plt\nfrom pydataset import data\nimport pandas as pd\n\nmtcars = data(\"mtcars\")\n\n# brushed_points(mtcars, {'xmin': 2, 'xmax': 3, 'ymin': 20, 'ymax': 30}, 'wt', 'mpg')\ndef brushed_points(df, position, xvar, yvar):\n    in_region = ((df[xvar] &gt; position['xmin']) \n                 & (df[xvar] &lt; position['xmax'])\n                 & (df[yvar] &gt; position['ymin'])\n                 & (df[yvar] &lt; position['ymax']))\n    \n    return df[in_region], in_region\n\n\napp_ui = ui.page_fluid(\n    ui.output_plot(\"plot\", brush=True, dblclick=True),\n)\n\ndef server(input, output, session):\n    selected = reactive.value([False for _ in range(mtcars.shape[0])])\n\n    @reactive.effect\n    @reactive.event(input.plot_brush)\n    def _():\n        _, brushed = brushed_points(mtcars, input.plot_brush(), xvar='wt', yvar='mpg')\n        selected.set(brushed | selected.get())\n    \n    @reactive.effect\n    @reactive.event(input.plot_dblclick)\n    def _():\n        selected.set([False for _ in range(mtcars.shape[0])])\n\n    @render.plot\n    def plot():\n        color = pd.Categorical(selected(), categories=[True, False])\n        fig, ax = plt.subplots()\n        res = ax.scatter(mtcars['wt'], mtcars['mpg'], c=color, label=color)\n        # produce a legend with the unique colors from the scatter\n        legend1 = ax.legend(*res.legend_elements(), loc=\"lower left\", title=\"Classes\")\n        ax.add_artist(legend1)        \n        return res\n\napp = App(app_ui, server)\n\n\n\n\n\n\nNote\n\n\n\nI slightly modified brushed_points() function that I used in a previous brushing examples, to return not only data points but also binary indicator whether each row in original data was selected or not in a current brushing event."
  },
  {
    "objectID": "action-graphics.html#dynamic-height-and-width",
    "href": "action-graphics.html#dynamic-height-and-width",
    "title": "Graphics",
    "section": "Dynamic height and width",
    "text": "Dynamic height and width\nDynamically resizing plot size: height and width.\nI could not exactly reproduce an example that exists in Mastering Shiny book for R. Let me show my code first, and let me explain more details.\n\n\nexamples/action-graphics/dynamic-height-width/app.py\n\nfrom shiny import App, ui, render, reactive\nimport matplotlib.pyplot as plt\nfrom numpy.random import normal\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"height\", \"height\", min=100, max=500, value=250),\n    ui.input_slider(\"width\", \"width\", min=100, max=500, value=250),\n    ui.output_ui(\"plot_container\"),\n)\n\ndef server(input, output, session):\n    @render.plot\n    def plot():\n        return plt.scatter(normal(size=20), normal(size=20))\n\n    @render.ui\n    def plot_container():\n        return ui.output_plot(\"plot\", \n                              height=f\"{input.height()}px\", \n                              width=f\"{input.width()}px\")\n\napp = App(app_ui, server)\n\nI followed an approach that was proposed by Vincent Nijs. It uses dynamic UI, ui.output_ui() and render.ui(), which will be discussed in later chapters.\nThe noticable difference between this app and R app presented in Mastering Shiny book is that, this app will keep refreshing the plot and regenerate the data when changing a plot size, while the original R app that uses width and height arguments in renderPlot() does not regenerate the data and only changes the plot’s appearance.\n\n\n\n\n\n\nWarning\n\n\n\nThis app will keep refreshing the plot and regenerate the data when changing a plot size.\n\n\n\n\n\n\n\n\nImportant\n\n\n\n@render.plot(width=input.width(), height=input.height()) returns an error message \"_send_error_response: No current reactive context\". @render.plot(width=input.width, height=input.height) returns an error message \"TypeError: unsupported operand type(s) for /: 'Value' and 'float'\". See relevant issue here."
  },
  {
    "objectID": "action-graphics.html#images",
    "href": "action-graphics.html#images",
    "title": "Graphics",
    "section": "Images",
    "text": "Images\n\n\nexamples/action-graphics/puppy/app.py\n\nfrom shiny import App, ui, render\nfrom shiny.types import ImgData\nimport pandas as pd\n\npuppies = pd.DataFrame({\n    'breed': [\"corgi\", \"labrador\", \"spaniel\"],\n    'id': [\"eoqnr8ikwFE\", \"KCdYn0xu2fU\", \"TzjMd7i5WQI\"],\n    'author': [\"alvannee\", \"shaneguymon\", \"_redo_\"],\n})\n\napp_ui = ui.page_fluid(\n    ui.input_select(\"id\", \"Pick a breed\", \n                    choices=dict(zip(puppies['id'], puppies['breed']))),\n    ui.output_ui(\"source\"),\n    ui.output_image(\"photo\"),\n)\n\ndef server(input, output, session):\n    @render.image\n    def photo():\n        img: ImgData = {\"src\": f\"puppy-photos/{input.id()}.jpg\", \n                        \"width\": \"500px\", \"height\": \"650px\"}\n        return img\n    \n    @render.ui\n    def source():\n        info = puppies[puppies['id'] == input.id()]\n        res = ui.HTML(f\"\"\"&lt;p&gt;\n            &lt;a href='https://unsplash.com/photos/{info['id'].squeeze()}'&gt;original&lt;/a&gt; by\n            &lt;a href='https://unsplash.com/@{info['author'].squeeze()}'&gt;{info['author'].squeeze()}&lt;/a&gt;\n            &lt;/p&gt;\"\"\")\n        \n        return res\n\napp = App(app_ui, server)\n\n\nImgData has additional attributes like alt and style. See here.\n\n\n\n\n\n\n\nNote\n\n\n\nWhen I run the app on my interactive development environment, directory puppy-photos exists in a root directory of the project. It may not be an ideal configuration for deployment. An example on the Shiny for Python website set a directory of image path to be relative to a directory that app.py file exists.\nfrom pathlib import Path\n\ndir = Path(__file__).resolve().parent"
  },
  {
    "objectID": "action-feedback.html#validation",
    "href": "action-feedback.html#validation",
    "title": "User Feedback",
    "section": "Validation",
    "text": "Validation\n\nValidating input\nThis requires a pacakge shiny_validate, which is a python implementation of R package shinyvalidate.\n\n\naction-feedback/input-validation/app.py\n\nfrom shiny import App, ui, render, reactive, req\nfrom shiny_validate import InputValidator\n\napp_ui = ui.page_fluid(\n    ui.input_numeric(\"n\", \"n\", value=10),\n    ui.output_text(\"half\"),\n)\n\ndef server(input, output, session):\n    iv = InputValidator()\n\n    iv.add_rule(\"n\", lambda x: \"Please select an even number\" if x%2 != 0 else None)\n    iv.enable()\n\n    @render.text\n    def half():\n        even = input.n()%2 == 0\n        req(even)\n        return input.n()/2\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nCaution\n\n\n\nDepending on {shiny_validate} version, it may reinstall {shiny} with different version. Please choose a right version that is compatible with your shiny installation or consider pip install --no-deps when installing {shiny_validate}.\n\n\n\n\n\n\n\n\nTip\n\n\n\nWhen there are mutliple controls and/or multiple rules, you can use iv.is_valid() to check whether all the input validation rules currently pass.\n\n\n\n\nCancelling execution with req()\n\n\nexamples/action-feedback/cancelling-execution/app.py\n\nfrom shiny import App, ui, render, req\n\napp_ui = ui.page_fluid(\n    ui.input_select(\"language\", \"Language\", choices=[\"\", \"English\", \"Maori\"]),\n    ui.input_text(\"name\", \"Name\"),\n    ui.output_text(\"greeting\"),\n)\n\ndef server(input, output, session):\n    greetings = {\n        'English': \"Hello\",\n        'Maori': \"Ki ora\",\n    }\n\n    @render.text\n    def greeting():\n        req(input.language(), input.name())\n        return f\"{greetings[input.language()]} {input.name()}!\"\n    \n\napp = App(app_ui, server)\n\n\n\nreq() and validation\nBelow is my attempt to implement an app that behave the same to the Mastering Shiny book example:\n\nWhen no input is provided, does not raise an error and just does not show any table\nWhen invalid data name is provided, show an error message, but keep a table output to be a table associated with the last valid input.\n\n\n\nexamples/action-feedback/dataset-name/app.py\n\nfrom shiny import App, ui, render, reactive, req\nfrom shiny_validate import InputValidator\nfrom pydataset import data\nimport numpy as np\n\ndatasets = set(data()['dataset_id'])\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"dataset\", \"Dataset name\"),\n    ui.output_table(\"table\"),\n)\n\ndef server(input, output, session):\n    iv = InputValidator()\n    iv.add_rule(\"dataset\", \n        lambda x: \"Unknown dataset\" \\\n            if len(x) &gt; 0 and not x in datasets \\\n            else None)\n    iv.enable()\n\n    @reactive.calc\n    def load():\n        req(input.dataset())\n        req(iv.is_valid(), cancel_output=True)\n        return data(input.dataset())\n    \n    @render.table\n    def table():\n        return load().head()\n\napp = App(app_ui, server)\n\nBelow is slightly different implementation by using check submodule of {shiny_validate}.\n\n\nexamples/action-feedback/dataset-name/app-check.py\n\nfrom shiny import App, ui, render, reactive, req\nfrom shiny_validate import InputValidator, check\nfrom pydataset import data\nimport numpy as np\n\ndatasets = set(data()['dataset_id'])\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"dataset\", \"Dataset name\"),\n    ui.output_table(\"table\"),\n)\n\ndef server(input, output, session):\n    iv = InputValidator()\n    iv.add_rule(\"dataset\", \n                check.compose_rules(\n                    check.required(\"Empty dataset name\"),\n                    check.in_set(datasets, \"Unknown dataset\")),\n                )\n                \n    iv.enable()\n\n    @reactive.calc\n    def load():\n        req(input.dataset())\n        req(iv.is_valid(), cancel_output=True)\n        return data(input.dataset())\n    \n    @render.table\n    def table():\n        return load().head()\n\napp = App(app_ui, server)\n\n\ncheck.required() is to set the input as required and throw an error message when input has not been provided.\ncheck.in_set() is to check whether the input is an element of given set. It is important that the type of set argument should be set.\ncheck.compose_rules() is to add multiple rules to a single input control.\n\n\n\nValidate output\nI could not find Shiny for Python’s equivalent of Shiny for R’s validate() function. Implementation below is per Gorden Shotwell’s recommendation on this thread.\n\n\nexamples/action-feedback/output-validation/app.py\n\nfrom shiny import App, ui, render, reactive, req\nimport numpy as np\n\napp_ui = ui.page_fluid(\n    ui.input_numeric(\"x\", \"x\", value=0),\n    ui.input_select(\"trans\", \"transformation\", choices=[\"square\", \"log\", \"square-root\"]),\n    ui.output_ui(\"out_container\"),\n)\n\ndef server(input, output, session):\n    @render.ui\n    def out_container():\n        if input.x() &lt; 0 and input.trans() in [\"log\", \"square-root\"]:\n            return ui.markdown(\"**x can not be negative for this transformation**\")\n        else:\n            return ui.output_text(\"out\")\n    \n    @render.text\n    def out():\n        req(not (input.x() &lt; 0 and input.trans() in [\"log\", \"square-root\"]))\n        match input.trans():\n            case \"square\":\n                res = input.x()**2\n            case \"square-root\":\n                res = np.sqrt(input.x())\n            case \"log\":\n                res = np.log(input.x())\n\n        return res\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nWarning\n\n\n\nI could not find Shiny for Python’s equivalent of Shiny for R’s validate() function. Implementation below is per Gorden Shotwell’s recommendation on this thread. I hope Shiny for Python provides validate() equvalent."
  },
  {
    "objectID": "action-feedback.html#notifications",
    "href": "action-feedback.html#notifications",
    "title": "User Feedback",
    "section": "Notifications",
    "text": "Notifications\n\nTransient notification\nui.notification_show() displays a message in the corner of the screen.\n\n\nexamples/action-feedback/transient-notification/app.py\n\nfrom shiny import Inputs, Outputs, Session, App, reactive, render, req, ui\nfrom time import sleep\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"goodnight\", \"Good night\"),\n)\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.goodnight)\n    def _():\n        ui.notification_show(\"So long\")\n        sleep(1)        \n        ui.notification_show(\"Farewell\", type=\"message\")\n        sleep(1)        \n        ui.notification_show(\"Auf Wiedersehen\", type=\"warning\")\n        sleep(1)        \n        ui.notification_show(\"Adieu\", type=\"error\")\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nNote\n\n\n\nShiny for Python website shows an example with asynchronous programming. I do not clearly understand what would be differences, but here is an asynchronous programming version implementation:\n\n\nexamples/action-feedback/transient-notification/app-async.py\n\nfrom shiny import Inputs, Outputs, Session, App, reactive, render, req, ui\nfrom asyncio import sleep\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"goodnight\", \"Good night\"),\n)\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.goodnight)\n    async def _():\n        ui.notification_show(\"So long\")\n        await sleep(1)\n        ui.notification_show(\"Farewell\", type=\"message\")\n        await sleep(1)\n        ui.notification_show(\"Auf Wiedersehen\", type=\"warning\")\n        await sleep(1)\n        ui.notification_show(\"Adieu\", type=\"error\")\n\napp = App(app_ui, server)\n\n\n\n\n\nRemoving on completion\n\n\nexamples/action-feedback/removing-notification/app.py\n\nfrom shiny import Inputs, Outputs, Session, App, reactive, render, req, ui\nfrom shiny.types import FileInfo\nimport pandas as pd\n\napp_ui = ui.page_fluid(\n    ui.input_file(\"file\", \"Add CSV file\", accept=\".csv\"),\n    ui.output_table(\"table\")\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.calc\n    def data():\n        id = ui.notification_show(\"Reading data...\",\n            duration=None, close_button=False)\n        \n        file: list[FileInfo] | None = input.file()\n        if file is None:\n            res = pd.DataFrame()\n        else:\n            res = pd.read_csv(file[0][\"datapath\"])\n\n        ui.notification_remove(id)\n        \n        return res\n        \n    @render.table\n    def table():\n        return data().head()\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nWarning\n\n\n\nI could not find Shiny for Python’s equivalent of Shiny for R’s on.exit() function. The app implementation above may be unreliable in a case when the reactive code chunk returns an error (e.g. when pd.read_csv() causes an error).\n\n\n\n\nProgressive updates\n\n\nexamples/action-feedback/progressive-update/app.py\n\nfrom shiny import Inputs, Outputs, Session, App, reactive, render, req, ui\nfrom pydataset import data\nfrom time import sleep\n\nmtcars = data('mtcars')\n\napp_ui = ui.page_fluid(\n    ui.output_table(\"table\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    def notify(msg, id=None):\n        return ui.notification_show(msg, id=id, duration=None, close_button=False)\n\n    @reactive.calc\n    def data():\n        id = notify(\"Reading data...\")\n        sleep(1)\n\n        notify(\"Reticulating splines...\", id=id)\n        sleep(1)\n\n        notify(\"Herding llamas...\", id=id)\n        sleep(1)\n\n        notify(\"Orthogonalizing matrices...\", id=id)\n        sleep(1)\n\n        ui.notification_remove(id)\n        return mtcars\n\n    @render.table\n    def table():\n        return data().head()\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "action-feedback.html#progress-bars",
    "href": "action-feedback.html#progress-bars",
    "title": "User Feedback",
    "section": "Progress bars",
    "text": "Progress bars\n\nShiny\n\n\nexamples/action-feedback/builtin-progress-bar/app.py\n\nfrom shiny import App, ui, render, reactive\nfrom time import sleep\nimport random\n\napp_ui = ui.page_fluid(\n    ui.input_numeric(\"steps\", \"How many steps?\", 10),\n    ui.input_action_button(\"go\", \"go\"),\n    ui.output_text(\"result\"),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    @reactive.event(input.go)\n    def data():\n        with ui.Progress() as p:\n            p.set(message=\"Computing random number\")\n            for i in range(1, input.steps()):\n                p.inc(1/input.steps())\n                sleep(0.5)\n        \n        return random.uniform(0, 1)\n    \n    @render.text\n    def result():\n        return round(data(), 2)\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nNote\n\n\n\nThe following code provides equally behaving progress bar:\nwith ui.Progress(min=1, max=input.steps()) as p:\n    p.set(message=\"Computing random number\")\n        for i in range(1, input.steps()):\n            p.set(i)\n            sleep(0.5)\n\nYou can pass min and max arguments when initializing the progress bar to set the starting point and end of the progress bar. If you do not provide, they set to be min=0 and max=1 by default.\nInstead of inc() that increment the progress bar by amount argument, you can use set() that update progress to be value argument.\n\n\n\n\n\nWaiter\nThere is a python package py-waiter that provides python implementation of waiter package from John Coene. As of January 19, 2024, py-waiter only exists in github.\nLet me further explore this package later, probably once the package is registered to PyPI.\n\n\nSpinners\nThe same situation to waiter."
  },
  {
    "objectID": "action-feedback.html#confirming-and-undoing",
    "href": "action-feedback.html#confirming-and-undoing",
    "title": "User Feedback",
    "section": "Confirming and undoing",
    "text": "Confirming and undoing\n\nExplicit confirmation\n\n\nexamples/action-feedback/explicit-confirmation/app.py\n\nfrom shiny import App, ui, reactive\n\nmodal_confirm = ui.modal(\n    \"Are you sure you want to continue?\",\n    title=\"Delete files\",\n    footer=ui.TagList(\n        ui.input_action_button(\"cancel\", \"Cancel\"),\n        ui.input_action_button(\"ok\", \"Delete\", class_=\"btn btn-danger\"),\n    )\n)\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"delete\", \"Delete all files?\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.delete)\n    def delete():\n        ui.modal_show(modal_confirm)\n    \n    @reactive.effect\n    @reactive.event(input.ok)\n    def ok():\n        ui.notification_show(\"Files deleted\")\n        ui.modal_remove()\n    \n    @reactive.effect\n    @reactive.event(input.cancel)\n    def cancel():\n        ui.modal_remove()\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nNote\n\n\n\nFor \"cancel\" button on modal dialog footer, because there is no associated tasks other than closing the modal dialog, you may want to consider using ui.modal_button() within the UI while removing server-side behavior for the button event:\n\n\nexamples/action-feedback/explicit-confirmation/app-modal-button.py\n\nfrom shiny import App, ui, reactive\n\nmodal_confirm = ui.modal(\n    \"Are you sure you want to continue?\",\n    title=\"Delete files\",\n    footer=ui.TagList(\n        ui.modal_button(\"Cancel\"),\n        ui.input_action_button(\"ok\", \"Delete\", class_=\"btn btn-danger\"),\n    )\n)\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"delete\", \"Delete all files?\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.delete)\n    def delete():\n        ui.modal_show(modal_confirm)\n    \n    @reactive.effect\n    @reactive.event(input.ok)\n    def ok():\n        ui.notification_show(\"Files deleted\")\n        ui.modal_remove()\n\napp = App(app_ui, server)\n\n\n\n\n\nUndoing an Action\n\n\n\n\n\n\nCaution\n\n\n\nI could not reproduct the app in python. Here are two topics that I do not know how to implemet in Shiny for Python. - Let observe run only once, which is equivalent to once = TRUE in observeEvent() in R. - Destory existing observer from outside the scope that the observer exists."
  },
  {
    "objectID": "action-transfer.html#upload",
    "href": "action-transfer.html#upload",
    "title": "Uploads and downloads",
    "section": "Upload",
    "text": "Upload\n\nServer\n\n\nexamples/action-transfer/upload-multiple/app.py\n\nfrom shiny import App, ui, render\nimport pandas as pd\n\napp_ui = ui.page_fluid(\n    ui.input_file(\"upload\", None, button_label=\"Upload...\", multiple=True),\n    ui.output_table(\"files\"),\n)\n\ndef server(input, output, session):\n    @render.table\n    def files():\n        return pd.DataFrame(input.upload())\n\napp = App(app_ui, server)\n\n\n\nUploading data\n\n\naction-transfer/uploading-data/app.py\n\nfrom shiny import App, ui, render, reactive, req\nimport os\nimport pandas as pd\n\napp_ui = ui.page_fluid(\n    ui.input_file(\"file\", None, accept=[\".csv\", \".tsv\"]),\n    ui.input_numeric(\"n\", \"Rows\", value=5, min=1, step=1),\n    ui.output_ui(\"out_container\"),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def data():\n        req(input.file())\n\n        _, ext = os.path.splitext(input.file()[0][\"name\"])\n\n        match ext:\n            case \".csv\":\n                return pd.read_csv(input.file()[0][\"datapath\"])\n            case \".tsv\":\n                return pd.read_csv(input.file()[0][\"datapath\"], delimiter=\"\\t\")\n            case _:\n                return None\n    \n    @render.ui\n    def out_container():\n        if isinstance(data(), pd.DataFrame):\n            return ui.output_table(\"head\")\n        else:\n            return ui.markdown(\"**Invalid file; Please upload a .csv or .tsv file**\")\n        \n    @render.table\n    def head():\n        req(isinstance(data(), pd.DataFrame))\n        return data().head(input.n())\n                \napp = App(app_ui, server)"
  },
  {
    "objectID": "action-transfer.html#download",
    "href": "action-transfer.html#download",
    "title": "Uploads and downloads",
    "section": "Download",
    "text": "Download\n\nDownloading data\n\n\nexamples/action-transfer/downloading-data/app.py\n\nfrom shiny import App, ui, render, reactive, req\nimport pandas as pd\nfrom pydataset import data\n\ndatasets = list(data()[\"dataset_id\"])\n\napp_ui = ui.page_fluid(\n    ui.input_select(\"dataset\", \"Pick a dataset\", datasets),\n    ui.output_table(\"preview\"),\n    ui.download_button(\"download_tsv\", \"Download .tsv\"),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def df():\n        return data(input.dataset())\n    \n    @render.table\n    def preview():\n        req(isinstance(df(), pd.DataFrame))\n        return df().head()\n    \n    @session.download(filename=lambda: f\"{input.dataset()}.tsv\")\n    def download_tsv():\n        yield df().to_csv(None, sep=\"\\t\", index=False)\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nNote\n\n\n\nPlease note that filename argument in session.download() should be a lambda function when using reactive input.\n\n\n\n\nDownloading reports\nLet us render quarto document (.qmd) to html format.\n\n\nreport.qmd\n\n---\ntitle: \"My Document\"\nformat:\n    html:\n        embed-resources: true\njupyter: python3\n---\n\n```{python}\n#| tags: [parameters]\n\nn = 10\n```\n\n\n```{python}\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nplt.scatter(np.random.normal(size=n), np.random.normal(size=n))\n```\n\n\n\nexamples/action-transfer/downloading-report/app.py\n\nfrom shiny import App, ui\nimport subprocess\nimport tempfile\nimport shutil\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of points\", 1, 100, 50),\n    ui.download_button(\"report\", \"Generate report\"),\n)\n\ndef server(input, output, session):\n    @session.download(filename=\"report.html\")\n    def report():\n        id = ui.notification_show(\n            \"Rendering report...\",\n            duration=None,\n            close_button=False\n        )\n\n        with tempfile.TemporaryDirectory() as tmpdirname:\n            source_file = '/'.join([tmpdirname, \"report.qmd\"])\n            shutil.copy(\"report.qmd\", source_file)\n            subprocess.run([\n                'quarto', 'render', source_file,\n                '-P', f\"n:{input.n()}\"\n            ])\n\n            output_file = '/'.join([tmpdirname, \"report.html\"])\n            html_file = open(output_file, 'r')\n            html_docs = html_file.read()\n\n        yield html_docs\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nImportant\n\n\n\nPlease note that I copied report.qmd file to temporary directory and rendered document within the temporary directory. If I render .qmd directly within app directory, the app will be automatcially reloaded when it runs with --reload option. VS Code extension for Shiny for Python runs the app with --reload option. You can avoid automatic reload by running the app in terminal with shiny run --launch-browser app.py. However, it would still be good to consider using temporary directory when it is applicable.\n\n\n\n\n\n\n\n\nCaution\n\n\n\nShiny for python version 0.7.0 (released on 2024-01-25) added @render.download as a replacement of @session.download. As a result, @session.download has been deprecated. This book is written with Shiny for python version 0.6.1, which @render.download was not available yet."
  },
  {
    "objectID": "action-transfer.html#case-study",
    "href": "action-transfer.html#case-study",
    "title": "Uploads and downloads",
    "section": "Case study",
    "text": "Case study\n\n\nexamples/action-transfer/cleaning-data/app.py\n\nfrom shiny import Inputs, Outputs, Session, App, reactive, render, req, ui\nimport pandas as pd\nimport janitor\nimport os\n\nui_upload = ui.layout_sidebar(\n    ui.sidebar(\n        ui.input_file(\"file\", \"Data\", button_label=\"Upload...\"),\n        ui.input_text(\"delim\", \"Delimiter (leave blank to guess)\", \"\"),\n        ui.input_numeric(\"skip\", \"Rows to skip\", 0, min=0),\n        ui.input_numeric(\"rows\", \"Rows to preview\", 10, min=1),\n    ),\n    ui.h3(\"Raw data\"),\n    ui.output_table(\"preview1\"),\n)\n\nui_clean = ui.layout_sidebar(\n    ui.sidebar(\n        ui.input_checkbox(\"snake\", \"Rename columns to snake case?\"),\n        ui.input_checkbox(\"constant\", \"Remove constant columns?\"),\n        ui.input_checkbox(\"empty\", \"Remove empty cols?\"),\n    ),\n    ui.h3(\"Cleaner data\"),\n    ui.output_table(\"preview2\"),\n)\n\nui_download = ui.row(\n    ui.column(12, ui.download_button(\"download\", \"Download cleaner data\", class_=\"btn-block\")),\n)\n\napp_ui = ui.page_fluid(\n    ui_upload,\n    ui_clean,\n    ui_download,\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    # Upload ----------------------------------\n    @reactive.calc\n    def raw():\n        req(input.file())\n        delim = None if input.delim() == \"\" else input.delim()\n        res = pd.read_csv(\n            input.file()[0][\"datapath\"], \n            delimiter=delim,\n            skiprows=input.skip())\n        return res\n    \n    @render.table\n    def preview1():\n        return raw().head(input.rows())\n    \n    # Clean ------------------------------------\n    @reactive.calc\n    def tidied():\n        out = raw()\n        if input.snake():\n            out = out.clean_names(case_type='snake')\n        if input.empty():\n            out.dropna(how='all', axis=1, inplace=True)\n        if input.constant():\n            out = out.drop_constant_columns()\n        return out\n\n    @render.table\n    def preview2():\n        return tidied().head(input.rows())\n    \n    # Download --------------------------------\n    @session.download(filename=lambda: f\"{os.path.splitext(input.file()[0]['name'])[0]}.tsv\")\n    def download():\n        yield tidied().to_csv(None, sep=\"\\t\", index=False)\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "action-transfer.html#exercise",
    "href": "action-transfer.html#exercise",
    "title": "Uploads and downloads",
    "section": "Exercise",
    "text": "Exercise\n\nCreate an app to upload CSV file, select a variable, and then perform a t-test.\n\n\n\nsolutions/action-transfer/ttest/app.py\n\nfrom shiny import Inputs, Outputs, Session, App, reactive, render, req, ui\nimport numpy as np\nimport pandas as pd\nfrom scipy.stats import ttest_1samp\n\napp_ui = ui.page_fluid(\n    ui.input_file(\"file\", \"Upload CSV\", accept=\".csv\"),\n    ui.input_select(\"var\", \"Variable\", choices=[None]),\n    ui.output_text_verbatim(\"ttest\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.calc\n    def data():\n        req(input.file())\n        res = pd.read_csv(input.file()[0][\"datapath\"])\n\n        return res.select_dtypes(include=[np.number])\n    \n    @reactive.effect\n    @reactive.event(data)\n    def _():\n        ui.update_select(\"var\", choices=data().columns.tolist())\n    \n    @render.text\n    def ttest():\n        req(input.var())\n        return ttest_1samp(data()[input.var()], 0)\n\n\napp = App(app_ui, server)\n\n\nCreate an app to upload CSV file, select one variable, draw a histogram, and then download the histogram.\n\n\n\nsolutions/action-transfer/histogram/app.py\n\nfrom shiny import Inputs, Outputs, Session, App, reactive, render, req, ui\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport io\n\napp_ui = ui.page_fluid(\n    ui.input_file(\"file\", \"Upload CSV\", accept=\".csv\"),\n    ui.input_select(\"var\", \"Variable\", choices=[None]),\n    ui.output_plot(\"histogram\"),\n    ui.row(\n        ui.column(4,\n                  ui.input_select(\"ext\", \"Download file type\",\n                                  choices=['png', 'pdf', 'svg'],\n                                  selected='png')),    \n        ui.column(6, ui.download_button(\"download_hist\", \"Download histogram\")),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.calc\n    def data():\n        req(input.file())\n        res = pd.read_csv(input.file()[0][\"datapath\"])\n\n        return res.select_dtypes(include=[np.number])\n    \n    @reactive.effect\n    @reactive.event(data)\n    def _():\n        ui.update_select(\"var\", choices=data().columns.tolist())\n    \n    @reactive.calc\n    def hist_plot():\n        req(input.var())\n        fig = plt.figure()\n        plt.hist(data()[input.var()])\n        return fig\n\n    @render.plot\n    def histogram():\n        return hist_plot()\n    \n    @session.download(filename=lambda: f\"histogram.{input.ext()}\")\n    def download_hist():\n        with io.BytesIO() as buf:\n            hist_plot().savefig(buf, format=input.ext())\n            yield buf.getvalue()\n\n\napp = App(app_ui, server)\n\n\nBreak up tidied() reactive into multiple pieces.\n\n\n\nsolutions/action-transfer/cleaning-data/app.py\n\nfrom shiny import Inputs, Outputs, Session, App, reactive, render, req, ui\nimport pandas as pd\nimport janitor\nimport os\n\nui_upload = ui.layout_sidebar(\n    ui.sidebar(\n        ui.input_file(\"file\", \"Data\", button_label=\"Upload...\"),\n        ui.input_text(\"delim\", \"Delimiter (leave blank to guess)\", \"\"),\n        ui.input_numeric(\"skip\", \"Rows to skip\", 0, min=0),\n        ui.input_numeric(\"rows\", \"Rows to preview\", 10, min=1),\n    ),\n    ui.h3(\"Raw data\"),\n    ui.output_table(\"preview1\"),\n)\n\nui_clean = ui.layout_sidebar(\n    ui.sidebar(\n        ui.input_checkbox(\"snake\", \"Rename columns to snake case?\"),\n        ui.input_checkbox(\"constant\", \"Remove constant columns?\"),\n        ui.input_checkbox(\"empty\", \"Remove empty cols?\"),\n    ),\n    ui.h3(\"Cleaner data\"),\n    ui.output_table(\"preview2\"),\n)\n\nui_download = ui.row(\n    ui.column(12, ui.download_button(\"download\", \"Download cleaner data\", class_=\"btn-block\")),\n)\n\napp_ui = ui.page_fluid(\n    ui_upload,\n    ui_clean,\n    ui_download,\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    # Upload ----------------------------------\n    @reactive.calc\n    def raw():\n        req(input.file())\n        delim = None if input.delim() == \"\" else input.delim()\n        res = pd.read_csv(\n            input.file()[0][\"datapath\"], \n            delimiter=delim,\n            skiprows=input.skip())\n        return res\n    \n    @render.table\n    def preview1():\n        return raw().head(input.rows())\n    \n    # Clean ------------------------------------\n    @reactive.calc\n    def tidied_snake():\n        out = raw()\n        if input.snake():\n            out = out.clean_names(case_type='snake')\n        return out\n    \n    @reactive.calc\n    def tidied_empty():\n        out = tidied_snake()\n        if input.empty():\n            out.dropna(how='all', axis=1, inplace=True)\n        return out\n    \n    @reactive.calc\n    def tidied_constant():\n        out = tidied_empty()\n        if input.constant():\n            out = out.drop_constant_columns()\n        return out\n\n    @render.table\n    def preview2():\n        return tidied_constant().head(input.rows())\n    \n    # Download --------------------------------\n    @session.download(filename=lambda: f\"{os.path.splitext(input.file()[0]['name'])[0]}.tsv\")\n    def download():\n        yield tidied_constant().to_csv(None, sep=\"\\t\", index=False)\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "action-dynamic.html#updating-inputs",
    "href": "action-dynamic.html#updating-inputs",
    "title": "Dynamic UI",
    "section": "Updating inputs",
    "text": "Updating inputs\n\n\nexamples/action-dynamic/slider-min-max/app.py\n\nfrom shiny import App, ui, reactive\n\napp_ui = ui.page_fluid(\n    ui.input_numeric(\"min\", \"Minimum\", 0),\n    ui.input_numeric(\"max\", \"Maximum\", 3),\n    ui.input_slider(\"n\", \"n\", min=0, max=3, value=1),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.min)\n    def _():\n        ui.update_slider(\"n\", min=input.min())\n    \n    @reactive.effect\n    @reactive.event(input.max)\n    def _():\n        ui.update_slider(\"n\", max=input.max())\n\napp = App(app_ui, server)\n\n\nSimple uses\n\n\nexamples/action-dynamic/reset/app.py\n\nfrom shiny import App, ui, reactive\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"x1\", \"x1\", min=-10, max=10, value=0),\n    ui.input_slider(\"x2\", \"x2\", min=-10, max=10, value=0),\n    ui.input_slider(\"x3\", \"x3\", min=-10, max=10, value=0),\n    ui.input_action_button(\"reset\", \"Reset\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.reset)\n    def _():\n        ui.update_slider(\"x1\", value=0)\n        ui.update_slider(\"x2\", value=0)\n        ui.update_slider(\"x3\", value=0)\n\napp = App(app_ui, server)\n\n\n\nexamples/action-dynamic/action-button-label/app.py\n\nfrom shiny import App, ui, reactive\n\napp_ui = ui.page_fluid(\n    ui.input_numeric(\"n\", \"Simulations\", 10),\n    ui.input_action_button(\"simulate\", \"Simulate\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.n)\n    def _():\n        label = f\"Simulate {input.n()} times\"\n        ui.update_action_button(\"simulate\", label=label)\n\napp = App(app_ui, server)\n\n\n\nHierarchical select boxes\n\n\nexamples/action-dynamic/hierarchical-select-box/app.py\n\nfrom shiny import App, ui, reactive, req, render\nimport pandas as pd\n\nsales = pd.read_csv(\"sales-dashboard/sales_data_sample.csv\",\n                    sep=\",\", encoding=\"Latin-1\", \n                    na_values=[\"\", \"NaN\"], keep_default_na=False)\n\napp_ui = ui.page_fluid(\n    ui.input_select(\"territory\", \"Territory\", choices=sales['TERRITORY'].unique().tolist()),\n    ui.input_select(\"customername\", \"Customer\", choices=list()),\n    ui.input_select(\"ordernumber\", \"Order number\", choices=list()),\n    ui.output_table(\"data\"),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def territory():\n        return sales[sales['TERRITORY']==input.territory()]\n    \n    @reactive.effect\n    @reactive.event(territory)\n    def _():\n        choices = territory()['CUSTOMERNAME'].unique().tolist()\n        ui.update_select(\"customername\", choices=choices)\n\n    @reactive.calc\n    def customer():\n        req(input.customername())\n        return territory()[territory()['CUSTOMERNAME']==input.customername()]\n    \n    @reactive.effect\n    @reactive.event(customer)\n    def _():\n        choices = customer()['ORDERNUMBER'].unique().tolist()\n        ui.update_select(\"ordernumber\", choices=choices)\n    \n    @render.table\n    def data():\n        req(input.ordernumber())\n        res = customer()[customer()['ORDERNUMBER']==int(input.ordernumber())]\\\n            [['QUANTITYORDERED', 'PRICEEACH', 'PRODUCTCODE']]\n        \n        return res\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nNote\n\n\n\nPlease note that choices=list() was used in ui.input_select() when creating empty drop-down list for select input control. choices=None does not work, because a value of choices must be list, tuple, or dictionary.\n\n\n\n\n\n\n\n\nNote\n\n\n\nPlease note that input.ordernumber() returns string, even though underlying data variable ORDERNUMBER is integer. To compare input.ordernumber() with the underlying data variable, I did typecasting int(input.ordernumber()).\n\n\n\n\nFreezing reactive inputs\n\n\nexamples/action-dynamic/freezing-reactive-input/app.py\n\nfrom shiny import App, ui, reactive, render, req\nfrom pydataset import data\n\napp_ui = ui.page_fluid(\n    ui.input_select(\"dataset\", \"Choose a dataset\", choices=(\"pressure\", \"cars\")),\n    ui.input_select(\"column\", \"Choose column\", choices=tuple()),\n    ui.output_text_verbatim(\"summary\"),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def dataset():\n        return data(input.dataset())\n    \n    @reactive.effect\n    @reactive.event(input.dataset)\n    def _():\n        reactive.value.freeze(input.column)\n        ui.update_select(\"column\", choices=dataset().columns.tolist())\n    \n    @render.text\n    def summary():\n        return dataset()[input.column()].describe()\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\nNote\n\n\n\nPlease note that the argument of reactive.value.freeze() is input.column, not input.column().\n\n\n\n\nExercise\n\nLet date input allow a user to select only dates in the selected year.\n\n\n\nsolutions/action-dynamic/updating-inputs/update-year/app.py\n\nfrom shiny import App, ui, reactive\nimport datetime\n\napp_ui = ui.page_fluid(\n    ui.input_numeric(\"year\", \"year\", value=2020),\n    ui.input_date(\"date\", \"date\", value=datetime.date(2020, 1, 1)),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.year)\n    def _():\n        d = datetime.date(\n            input.year(),\n            input.date().month,\n            28 if input.date().month == 2 and input.date().day == 29 else input.date().day\n        )\n        ui.update_date(\"date\", \n                       value=d,\n                       min=datetime.date(input.year(), 1, 1),\n                       max=datetime.date(input.year(), 12, 31))\n\napp = App(app_ui, server)\n\n\nHierarchical select boxes for state and county\n\n\n\nsolutions/action-dynamic/updating-inputs/update-county/app.py\n\n# Please download county.csv from https://www.openintro.org/data/\n# and store it to data/ folder\n# before running this app\n\nfrom shiny import App, ui, reactive\nimport pandas as pd\n\ndf = pd.read_csv(\"data/county.csv\")\nstates = df['state'].unique().tolist()\n\napp_ui = ui.page_fluid(\n    ui.input_select(\"state\", \"State\", choices=states),\n    ui.input_select(\"county\", \"County\", choices=list()),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.state)\n    def _():\n        county_label = \"County\"\n        if input.state()==\"Louisiana\":\n            county_label = \"Parish\"\n        elif input.state()==\"Alaska\":\n            county_label = \"Borough\"\n\n        counties = df[df['state']==input.state()]['name'].to_list()\n        ui.update_select(\"county\", label=county_label, choices=counties)\n\n\napp = App(app_ui, server)\n\n3 & 4.\n\n\nsolutions/action-dynamic/updating-inputs/gapminder/app.py\n\nfrom shiny import App, ui, reactive, render\nfrom gapminder import gapminder\n\ncontinents = gapminder['continent'].unique().tolist()\n\napp_ui = ui.page_fluid(\n    ui.input_select(\"continent\", \"Continent\", choices=[\"(All)\"] + continents),\n    ui.input_select(\"country\", \"Country\", choices=list()),\n    ui.output_table(\"data\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.continent)\n    def _():\n        if input.continent() == \"(All)\":\n            countries = gapminder['country'].unique().tolist()\n        else:\n            countries = gapminder[gapminder['continent']==input.continent()]['country'].unique().tolist()\n        ui.update_select(\"country\", choices=countries)\n\n    @reactive.calc\n    def country():\n        return gapminder[gapminder['country']==input.country()]\n    \n    @render.table\n    def data():\n        return country()\n\napp = App(app_ui, server)"
  }
]